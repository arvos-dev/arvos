[
    {
        "vulnerability": "CVE-2021-39144",
        "repository": "x-stream/xstream",
        "symbols": [
            {
                "class_name": "com.thoughtworks.xstream.XStreamer",
                "method_name": "toXML",
                "parameters": "(XStream, Object, Writer)",
                "footprint": "com.thoughtworks.xstream.XStreamer.toXML(XStream, Object, Writer)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStreamer",
                "method_name": "fromXML",
                "parameters": "(HierarchicalStreamDriver, Reader, TypePermission[])",
                "footprint": "com.thoughtworks.xstream.XStreamer.fromXML(HierarchicalStreamDriver, Reader, TypePermission[])"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupSecurity",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupSecurity()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupDefaultSecurity",
                "parameters": "(XStream)",
                "footprint": "com.thoughtworks.xstream.XStream.setupDefaultSecurity(XStream)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "unmarshal",
                "parameters": "(HierarchicalStreamReader, Object, DataHolder)",
                "footprint": "com.thoughtworks.xstream.XStream.unmarshal(HierarchicalStreamReader, Object, DataHolder)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "addPermission",
                "parameters": "(TypePermission)",
                "footprint": "com.thoughtworks.xstream.XStream.addPermission(TypePermission)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "readResolve",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.readResolve()"
            },
            {
                "class_name": "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider",
                "method_name": "instantiateUsingSerialization",
                "parameters": "(Class)",
                "footprint": "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.instantiateUsingSerialization(Class)"
            },
            {
                "class_name": "com.thoughtworks.xstream.converters.reflection.Anonymous",
                "method_name": "resolveClass",
                "parameters": "(ObjectStreamClass)",
                "footprint": "com.thoughtworks.xstream.converters.reflection.Anonymous.resolveClass(ObjectStreamClass)"
            },
            {
                "class_name": "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider",
                "method_name": "init",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.init()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 10,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.672930"
    },
    {
        "vulnerability": "CVE-2021-39141",
        "repository": "x-stream/xstream",
        "symbols": [
            {
                "class_name": "com.thoughtworks.xstream.XStreamer",
                "method_name": "toXML",
                "parameters": "(XStream, Object, Writer)",
                "footprint": "com.thoughtworks.xstream.XStreamer.toXML(XStream, Object, Writer)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStreamer",
                "method_name": "fromXML",
                "parameters": "(HierarchicalStreamDriver, Reader, TypePermission[])",
                "footprint": "com.thoughtworks.xstream.XStreamer.fromXML(HierarchicalStreamDriver, Reader, TypePermission[])"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupSecurity",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupSecurity()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupDefaultSecurity",
                "parameters": "(XStream)",
                "footprint": "com.thoughtworks.xstream.XStream.setupDefaultSecurity(XStream)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "unmarshal",
                "parameters": "(HierarchicalStreamReader, Object, DataHolder)",
                "footprint": "com.thoughtworks.xstream.XStream.unmarshal(HierarchicalStreamReader, Object, DataHolder)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "addPermission",
                "parameters": "(TypePermission)",
                "footprint": "com.thoughtworks.xstream.XStream.addPermission(TypePermission)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "readResolve",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.readResolve()"
            },
            {
                "class_name": "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider",
                "method_name": "instantiateUsingSerialization",
                "parameters": "(Class)",
                "footprint": "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.instantiateUsingSerialization(Class)"
            },
            {
                "class_name": "com.thoughtworks.xstream.converters.reflection.Anonymous",
                "method_name": "resolveClass",
                "parameters": "(ObjectStreamClass)",
                "footprint": "com.thoughtworks.xstream.converters.reflection.Anonymous.resolveClass(ObjectStreamClass)"
            },
            {
                "class_name": "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider",
                "method_name": "init",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.init()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 10,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.673151"
    },
    {
        "vulnerability": "CVE-2021-39139",
        "repository": "x-stream/xstream",
        "symbols": [
            {
                "class_name": "com.thoughtworks.xstream.XStreamer",
                "method_name": "toXML",
                "parameters": "(XStream, Object, Writer)",
                "footprint": "com.thoughtworks.xstream.XStreamer.toXML(XStream, Object, Writer)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStreamer",
                "method_name": "fromXML",
                "parameters": "(HierarchicalStreamDriver, Reader, TypePermission[])",
                "footprint": "com.thoughtworks.xstream.XStreamer.fromXML(HierarchicalStreamDriver, Reader, TypePermission[])"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupSecurity",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupSecurity()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupDefaultSecurity",
                "parameters": "(XStream)",
                "footprint": "com.thoughtworks.xstream.XStream.setupDefaultSecurity(XStream)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "unmarshal",
                "parameters": "(HierarchicalStreamReader, Object, DataHolder)",
                "footprint": "com.thoughtworks.xstream.XStream.unmarshal(HierarchicalStreamReader, Object, DataHolder)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "addPermission",
                "parameters": "(TypePermission)",
                "footprint": "com.thoughtworks.xstream.XStream.addPermission(TypePermission)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "readResolve",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.readResolve()"
            },
            {
                "class_name": "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider",
                "method_name": "instantiateUsingSerialization",
                "parameters": "(Class)",
                "footprint": "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.instantiateUsingSerialization(Class)"
            },
            {
                "class_name": "com.thoughtworks.xstream.converters.reflection.Anonymous",
                "method_name": "resolveClass",
                "parameters": "(ObjectStreamClass)",
                "footprint": "com.thoughtworks.xstream.converters.reflection.Anonymous.resolveClass(ObjectStreamClass)"
            },
            {
                "class_name": "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider",
                "method_name": "init",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.init()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 10,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.673355"
    },
    {
        "vulnerability": "CVE-2021-33605",
        "repository": "vaadin/flow-components",
        "symbols": [
            {
                "class_name": "com.vaadin.flow.component.grid.Column<T>",
                "method_name": "setHeader",
                "parameters": "(String)",
                "footprint": "com.vaadin.flow.component.grid.Column<T>.setHeader(String)"
            },
            {
                "class_name": "com.vaadin.flow.component.grid.Column<T>",
                "method_name": "setHeader",
                "parameters": "(Component)",
                "footprint": "com.vaadin.flow.component.grid.Column<T>.setHeader(Component)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 50,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.673499"
    },
    {
        "vulnerability": "CVE-2021-44228",
        "repository": "apache/logging-log4j2",
        "symbols": [
            {
                "class_name": "org.apache.logging.log4j.core.net.JndiManager",
                "method_name": "lookup",
                "parameters": "(String)",
                "footprint": "org.apache.logging.log4j.core.net.JndiManager.lookup(String)"
            },
            {
                "class_name": "org.apache.logging.log4j.core.util.SetUtils",
                "method_name": "<init>",
                "parameters": "()",
                "footprint": "org.apache.logging.log4j.core.util.SetUtils.<init>()"
            },
            {
                "class_name": "org.apache.logging.log4j.core.util.SetUtils",
                "method_name": "prefixSet",
                "parameters": "(Set, String)",
                "footprint": "org.apache.logging.log4j.core.util.SetUtils.prefixSet(Set, String)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 33,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.673571"
    },
    {
        "vulnerability": "CVE-2021-23463",
        "repository": "h2database/h2database",
        "symbols": [
            {
                "class_name": "org.h2.jdbc.JdbcSQLXML",
                "method_name": "getSource",
                "parameters": "(Class)",
                "footprint": "org.h2.jdbc.JdbcSQLXML.getSource(Class)"
            },
            {
                "class_name": "org.h2.jdbc.JdbcSQLXML",
                "method_name": "setResult",
                "parameters": "(Class)",
                "footprint": "org.h2.jdbc.JdbcSQLXML.setResult(Class)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 50,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.673643"
    },
    {
        "vulnerability": "CVE-2020-14061",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<clinit>()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.673694"
    },
    {
        "vulnerability": "CVE-2020-14062",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<clinit>()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.673734"
    },
    {
        "vulnerability": "CVE-2020-14060",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<clinit>()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.673773"
    },
    {
        "vulnerability": "CVE-2020-14195",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<clinit>()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.673811"
    },
    {
        "vulnerability": "CVE-2020-10969",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<clinit>()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.673851"
    },
    {
        "vulnerability": "CVE-2020-9546",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<clinit>()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.673888"
    },
    {
        "vulnerability": "CVE-2021-31403",
        "repository": "vaadin/framework",
        "symbols": [
            {
                "class_name": "com.vaadin.client.event.PointerEventSupportImplIE10",
                "method_name": "getNativeEventName",
                "parameters": "(EventType)",
                "footprint": "com.vaadin.client.event.PointerEventSupportImplIE10.getNativeEventName(EventType)"
            },
            {
                "class_name": "com.vaadin.server.VaadinService",
                "method_name": "isCsrfTokenValid",
                "parameters": "(VaadinSession, String)",
                "footprint": "com.vaadin.server.VaadinService.isCsrfTokenValid(VaadinSession, String)"
            },
            {
                "class_name": "com.vaadin.server.communication.PushHandler",
                "method_name": "isPushIdValid",
                "parameters": "(VaadinSession, String)",
                "footprint": "com.vaadin.server.communication.PushHandler.isPushIdValid(VaadinSession, String)"
            },
            {
                "class_name": "com.vaadin.server.communication.FileUploadHandler",
                "method_name": "handleRequest",
                "parameters": "(VaadinSession, VaadinRequest, VaadinResponse)",
                "footprint": "com.vaadin.server.communication.FileUploadHandler.handleRequest(VaadinSession, VaadinRequest, VaadinResponse)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 25,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.673954"
    },
    {
        "vulnerability": "CVE-2020-36320",
        "repository": "vaadin/framework",
        "symbols": [
            {
                "class_name": "com.vaadin.client.widgets.Grid<T>",
                "method_name": "setDataSource",
                "parameters": "(DataSource)",
                "footprint": "com.vaadin.client.widgets.Grid<T>.setDataSource(DataSource)"
            },
            {
                "class_name": "com.vaadin.client.widgets.Anonymous",
                "method_name": "resetDataAndSize",
                "parameters": "(int)",
                "footprint": "com.vaadin.client.widgets.Anonymous.resetDataAndSize(int)"
            },
            {
                "class_name": "com.vaadin.data.BeanPropertySet<T>",
                "method_name": "<init>",
                "parameters": "(InstanceKey)",
                "footprint": "com.vaadin.data.BeanPropertySet<T>.<init>(InstanceKey)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 33,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.674037"
    },
    {
        "vulnerability": "CVE-2019-25028",
        "repository": "vaadin/framework",
        "symbols": [
            {
                "class_name": "com.vaadin.ui.Column<T, V>",
                "method_name": "setCaption",
                "parameters": "(String)",
                "footprint": "com.vaadin.ui.Column<T, V>.setCaption(String)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.674093"
    },
    {
        "vulnerability": "CVE-2020-36282",
        "repository": "rabbitmq/rabbitmq-jms-client",
        "symbols": [
            {
                "class_name": "com.rabbitmq.jms.client.RMQMessage",
                "method_name": "instantiateRmqMessage",
                "parameters": "(String, List)",
                "footprint": "com.rabbitmq.jms.client.RMQMessage.instantiateRmqMessage(String, List)"
            },
            {
                "class_name": "com.rabbitmq.jms.client.RMQMessage",
                "method_name": "instantiateRmqObjectMessageWithTrustedPackages",
                "parameters": "(List)",
                "footprint": "com.rabbitmq.jms.client.RMQMessage.instantiateRmqObjectMessageWithTrustedPackages(List)"
            },
            {
                "class_name": "com.rabbitmq.jms.client.message.RMQStreamMessage",
                "method_name": "<init>",
                "parameters": "()",
                "footprint": "com.rabbitmq.jms.client.message.RMQStreamMessage.<init>()"
            },
            {
                "class_name": "com.rabbitmq.jms.client.message.RMQStreamMessage",
                "method_name": "<init>",
                "parameters": "(boolean)",
                "footprint": "com.rabbitmq.jms.client.message.RMQStreamMessage.<init>(boolean)"
            },
            {
                "class_name": "com.rabbitmq.jms.client.message.RMQStreamMessage",
                "method_name": "readBody",
                "parameters": "(ObjectInput, ByteArrayInputStream)",
                "footprint": "com.rabbitmq.jms.client.message.RMQStreamMessage.readBody(ObjectInput, ByteArrayInputStream)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 20,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.674162"
    },
    {
        "vulnerability": "CVE-2021-21341",
        "repository": "x-stream/xstream",
        "symbols": [
            {
                "class_name": "com.thoughtworks.xstream.benchmark.jmh.ConverterTypeBenchmark",
                "method_name": "setUp",
                "parameters": "(BenchmarkParams)",
                "footprint": "com.thoughtworks.xstream.benchmark.jmh.ConverterTypeBenchmark.setUp(BenchmarkParams)"
            },
            {
                "class_name": "com.thoughtworks.xstream.benchmark.jmh.StringConverterBenchmark",
                "method_name": "setUp",
                "parameters": "(BenchmarkParams)",
                "footprint": "com.thoughtworks.xstream.benchmark.jmh.StringConverterBenchmark.setUp(BenchmarkParams)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupMappers",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupMappers()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupSecurity",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupSecurity()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "unmarshal",
                "parameters": "(HierarchicalStreamReader, Object, DataHolder)",
                "footprint": "com.thoughtworks.xstream.XStream.unmarshal(HierarchicalStreamReader, Object, DataHolder)"
            },
            {
                "class_name": "com.thoughtworks.xstream.mapper.ImmutableTypesMapper",
                "method_name": "isReferenceable",
                "parameters": "(Class)",
                "footprint": "com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isReferenceable(Class)"
            },
            {
                "class_name": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder",
                "method_name": "encodeName",
                "parameters": "(String)",
                "footprint": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder.encodeName(String)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 14,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.674284"
    },
    {
        "vulnerability": "CVE-2021-21342",
        "repository": "x-stream/xstream",
        "symbols": [
            {
                "class_name": "com.thoughtworks.xstream.benchmark.jmh.ConverterTypeBenchmark",
                "method_name": "setUp",
                "parameters": "(BenchmarkParams)",
                "footprint": "com.thoughtworks.xstream.benchmark.jmh.ConverterTypeBenchmark.setUp(BenchmarkParams)"
            },
            {
                "class_name": "com.thoughtworks.xstream.benchmark.jmh.StringConverterBenchmark",
                "method_name": "setUp",
                "parameters": "(BenchmarkParams)",
                "footprint": "com.thoughtworks.xstream.benchmark.jmh.StringConverterBenchmark.setUp(BenchmarkParams)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupMappers",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupMappers()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupSecurity",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupSecurity()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "unmarshal",
                "parameters": "(HierarchicalStreamReader, Object, DataHolder)",
                "footprint": "com.thoughtworks.xstream.XStream.unmarshal(HierarchicalStreamReader, Object, DataHolder)"
            },
            {
                "class_name": "com.thoughtworks.xstream.mapper.ImmutableTypesMapper",
                "method_name": "isReferenceable",
                "parameters": "(Class)",
                "footprint": "com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isReferenceable(Class)"
            },
            {
                "class_name": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder",
                "method_name": "encodeName",
                "parameters": "(String)",
                "footprint": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder.encodeName(String)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 14,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.674425"
    },
    {
        "vulnerability": "CVE-2021-21343",
        "repository": "x-stream/xstream",
        "symbols": [
            {
                "class_name": "com.thoughtworks.xstream.benchmark.jmh.ConverterTypeBenchmark",
                "method_name": "setUp",
                "parameters": "(BenchmarkParams)",
                "footprint": "com.thoughtworks.xstream.benchmark.jmh.ConverterTypeBenchmark.setUp(BenchmarkParams)"
            },
            {
                "class_name": "com.thoughtworks.xstream.benchmark.jmh.StringConverterBenchmark",
                "method_name": "setUp",
                "parameters": "(BenchmarkParams)",
                "footprint": "com.thoughtworks.xstream.benchmark.jmh.StringConverterBenchmark.setUp(BenchmarkParams)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupMappers",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupMappers()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupSecurity",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupSecurity()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "unmarshal",
                "parameters": "(HierarchicalStreamReader, Object, DataHolder)",
                "footprint": "com.thoughtworks.xstream.XStream.unmarshal(HierarchicalStreamReader, Object, DataHolder)"
            },
            {
                "class_name": "com.thoughtworks.xstream.mapper.ImmutableTypesMapper",
                "method_name": "isReferenceable",
                "parameters": "(Class)",
                "footprint": "com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isReferenceable(Class)"
            },
            {
                "class_name": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder",
                "method_name": "encodeName",
                "parameters": "(String)",
                "footprint": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder.encodeName(String)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 14,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.674567"
    },
    {
        "vulnerability": "CVE-2021-21344",
        "repository": "x-stream/xstream",
        "symbols": [
            {
                "class_name": "com.thoughtworks.xstream.benchmark.jmh.ConverterTypeBenchmark",
                "method_name": "setUp",
                "parameters": "(BenchmarkParams)",
                "footprint": "com.thoughtworks.xstream.benchmark.jmh.ConverterTypeBenchmark.setUp(BenchmarkParams)"
            },
            {
                "class_name": "com.thoughtworks.xstream.benchmark.jmh.StringConverterBenchmark",
                "method_name": "setUp",
                "parameters": "(BenchmarkParams)",
                "footprint": "com.thoughtworks.xstream.benchmark.jmh.StringConverterBenchmark.setUp(BenchmarkParams)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupMappers",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupMappers()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupSecurity",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupSecurity()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "unmarshal",
                "parameters": "(HierarchicalStreamReader, Object, DataHolder)",
                "footprint": "com.thoughtworks.xstream.XStream.unmarshal(HierarchicalStreamReader, Object, DataHolder)"
            },
            {
                "class_name": "com.thoughtworks.xstream.mapper.ImmutableTypesMapper",
                "method_name": "isReferenceable",
                "parameters": "(Class)",
                "footprint": "com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isReferenceable(Class)"
            },
            {
                "class_name": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder",
                "method_name": "encodeName",
                "parameters": "(String)",
                "footprint": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder.encodeName(String)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 14,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.674707"
    },
    {
        "vulnerability": "CVE-2021-21345",
        "repository": "x-stream/xstream",
        "symbols": [
            {
                "class_name": "com.thoughtworks.xstream.benchmark.jmh.ConverterTypeBenchmark",
                "method_name": "setUp",
                "parameters": "(BenchmarkParams)",
                "footprint": "com.thoughtworks.xstream.benchmark.jmh.ConverterTypeBenchmark.setUp(BenchmarkParams)"
            },
            {
                "class_name": "com.thoughtworks.xstream.benchmark.jmh.StringConverterBenchmark",
                "method_name": "setUp",
                "parameters": "(BenchmarkParams)",
                "footprint": "com.thoughtworks.xstream.benchmark.jmh.StringConverterBenchmark.setUp(BenchmarkParams)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupMappers",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupMappers()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupSecurity",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupSecurity()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "unmarshal",
                "parameters": "(HierarchicalStreamReader, Object, DataHolder)",
                "footprint": "com.thoughtworks.xstream.XStream.unmarshal(HierarchicalStreamReader, Object, DataHolder)"
            },
            {
                "class_name": "com.thoughtworks.xstream.mapper.ImmutableTypesMapper",
                "method_name": "isReferenceable",
                "parameters": "(Class)",
                "footprint": "com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isReferenceable(Class)"
            },
            {
                "class_name": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder",
                "method_name": "encodeName",
                "parameters": "(String)",
                "footprint": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder.encodeName(String)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 14,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.674845"
    },
    {
        "vulnerability": "CVE-2021-21346",
        "repository": "x-stream/xstream",
        "symbols": [
            {
                "class_name": "com.thoughtworks.xstream.benchmark.jmh.ConverterTypeBenchmark",
                "method_name": "setUp",
                "parameters": "(BenchmarkParams)",
                "footprint": "com.thoughtworks.xstream.benchmark.jmh.ConverterTypeBenchmark.setUp(BenchmarkParams)"
            },
            {
                "class_name": "com.thoughtworks.xstream.benchmark.jmh.StringConverterBenchmark",
                "method_name": "setUp",
                "parameters": "(BenchmarkParams)",
                "footprint": "com.thoughtworks.xstream.benchmark.jmh.StringConverterBenchmark.setUp(BenchmarkParams)"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupMappers",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupMappers()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupSecurity",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupSecurity()"
            },
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "unmarshal",
                "parameters": "(HierarchicalStreamReader, Object, DataHolder)",
                "footprint": "com.thoughtworks.xstream.XStream.unmarshal(HierarchicalStreamReader, Object, DataHolder)"
            },
            {
                "class_name": "com.thoughtworks.xstream.mapper.ImmutableTypesMapper",
                "method_name": "isReferenceable",
                "parameters": "(Class)",
                "footprint": "com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isReferenceable(Class)"
            },
            {
                "class_name": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder",
                "method_name": "encodeName",
                "parameters": "(String)",
                "footprint": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder.encodeName(String)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 14,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.674983"
    },
    {
        "vulnerability": "CVE-2021-21250",
        "repository": "theonedev/onedev",
        "symbols": [
            {
                "class_name": "io.onedev.server.web.editable.project.choice.ProjectSingleChoiceEditor",
                "method_name": "onInitialize",
                "parameters": "()",
                "footprint": "io.onedev.server.web.editable.project.choice.ProjectSingleChoiceEditor.onInitialize()"
            },
            {
                "class_name": "io.onedev.server.web.editable.project.choice.ProjectMultiChoiceEditor",
                "method_name": "onInitialize",
                "parameters": "()",
                "footprint": "io.onedev.server.web.editable.project.choice.ProjectMultiChoiceEditor.onInitialize()"
            },
            {
                "class_name": "io.onedev.server.web.editable.userchoice.UserMultiChoiceEditor",
                "method_name": "onInitialize",
                "parameters": "()",
                "footprint": "io.onedev.server.web.editable.userchoice.UserMultiChoiceEditor.onInitialize()"
            },
            {
                "class_name": "io.onedev.server.web.editable.userchoice.UserSingleChoiceEditor",
                "method_name": "onInitialize",
                "parameters": "()",
                "footprint": "io.onedev.server.web.editable.userchoice.UserSingleChoiceEditor.onInitialize()"
            },
            {
                "class_name": "io.onedev.server.web.component.project.choice.ProjectChoiceProvider",
                "method_name": "<init>",
                "parameters": "(List)",
                "footprint": "io.onedev.server.web.component.project.choice.ProjectChoiceProvider.<init>(List)"
            },
            {
                "class_name": "io.onedev.server.web.component.project.choice.ProjectChoiceProvider",
                "method_name": "query",
                "parameters": "(String, int, Response)",
                "footprint": "io.onedev.server.web.component.project.choice.ProjectChoiceProvider.query(String, int, Response)"
            },
            {
                "class_name": "io.onedev.server.web.component.pullrequest.choice.PullRequestChoiceProvider",
                "method_name": "query",
                "parameters": "(String, int, Response)",
                "footprint": "io.onedev.server.web.component.pullrequest.choice.PullRequestChoiceProvider.query(String, int, Response)"
            },
            {
                "class_name": "io.onedev.server.web.component.build.choice.BuildChoiceProvider",
                "method_name": "query",
                "parameters": "(String, int, Response)",
                "footprint": "io.onedev.server.web.component.build.choice.BuildChoiceProvider.query(String, int, Response)"
            },
            {
                "class_name": "io.onedev.server.web.component.issue.choice.IssueChoiceProvider",
                "method_name": "query",
                "parameters": "(String, int, Response)",
                "footprint": "io.onedev.server.web.component.issue.choice.IssueChoiceProvider.query(String, int, Response)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 11,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.675134"
    },
    {
        "vulnerability": "CVE-2021-21251",
        "repository": "theonedev/onedev",
        "symbols": [
            {
                "class_name": "io.onedev.server.web.editable.project.choice.ProjectSingleChoiceEditor",
                "method_name": "onInitialize",
                "parameters": "()",
                "footprint": "io.onedev.server.web.editable.project.choice.ProjectSingleChoiceEditor.onInitialize()"
            },
            {
                "class_name": "io.onedev.server.web.editable.project.choice.ProjectMultiChoiceEditor",
                "method_name": "onInitialize",
                "parameters": "()",
                "footprint": "io.onedev.server.web.editable.project.choice.ProjectMultiChoiceEditor.onInitialize()"
            },
            {
                "class_name": "io.onedev.server.web.editable.userchoice.UserMultiChoiceEditor",
                "method_name": "onInitialize",
                "parameters": "()",
                "footprint": "io.onedev.server.web.editable.userchoice.UserMultiChoiceEditor.onInitialize()"
            },
            {
                "class_name": "io.onedev.server.web.editable.userchoice.UserSingleChoiceEditor",
                "method_name": "onInitialize",
                "parameters": "()",
                "footprint": "io.onedev.server.web.editable.userchoice.UserSingleChoiceEditor.onInitialize()"
            },
            {
                "class_name": "io.onedev.server.web.component.project.choice.ProjectChoiceProvider",
                "method_name": "<init>",
                "parameters": "(List)",
                "footprint": "io.onedev.server.web.component.project.choice.ProjectChoiceProvider.<init>(List)"
            },
            {
                "class_name": "io.onedev.server.web.component.project.choice.ProjectChoiceProvider",
                "method_name": "query",
                "parameters": "(String, int, Response)",
                "footprint": "io.onedev.server.web.component.project.choice.ProjectChoiceProvider.query(String, int, Response)"
            },
            {
                "class_name": "io.onedev.server.web.component.pullrequest.choice.PullRequestChoiceProvider",
                "method_name": "query",
                "parameters": "(String, int, Response)",
                "footprint": "io.onedev.server.web.component.pullrequest.choice.PullRequestChoiceProvider.query(String, int, Response)"
            },
            {
                "class_name": "io.onedev.server.web.component.build.choice.BuildChoiceProvider",
                "method_name": "query",
                "parameters": "(String, int, Response)",
                "footprint": "io.onedev.server.web.component.build.choice.BuildChoiceProvider.query(String, int, Response)"
            },
            {
                "class_name": "io.onedev.server.web.component.issue.choice.IssueChoiceProvider",
                "method_name": "query",
                "parameters": "(String, int, Response)",
                "footprint": "io.onedev.server.web.component.issue.choice.IssueChoiceProvider.query(String, int, Response)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 11,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.675313"
    },
    {
        "vulnerability": "CVE-2021-21307",
        "repository": "lucee/Lucee",
        "symbols": [
            {
                "class_name": "lucee.runtime.functions.xml.UniversalNamespaceResolver",
                "method_name": "<init>",
                "parameters": "(Document)",
                "footprint": "lucee.runtime.functions.xml.UniversalNamespaceResolver.<init>(Document)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.675416"
    },
    {
        "vulnerability": "CVE-2020-28491",
        "repository": "FasterXML/jackson-dataformats-binary",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.dataformat.cbor.CBORParser",
                "method_name": "_readAndWriteBytes",
                "parameters": "(OutputStream, int)",
                "footprint": "com.fasterxml.jackson.dataformat.cbor.CBORParser._readAndWriteBytes(OutputStream, int)"
            },
            {
                "class_name": "com.fasterxml.jackson.dataformat.cbor.CBORParser",
                "method_name": "_finishBytes",
                "parameters": "(int)",
                "footprint": "com.fasterxml.jackson.dataformat.cbor.CBORParser._finishBytes(int)"
            },
            {
                "class_name": "com.fasterxml.jackson.dataformat.cbor.CBORParser",
                "method_name": "_decodeNonStringName",
                "parameters": "(int)",
                "footprint": "com.fasterxml.jackson.dataformat.cbor.CBORParser._decodeNonStringName(int)"
            },
            {
                "class_name": "com.fasterxml.jackson.dataformat.cbor.CBORParser",
                "method_name": "loadMore",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.dataformat.cbor.CBORParser.loadMore()"
            },
            {
                "class_name": "com.fasterxml.jackson.dataformat.cbor.CBORParser",
                "method_name": "loadMoreGuaranteed",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.dataformat.cbor.CBORParser.loadMoreGuaranteed()"
            },
            {
                "class_name": "com.fasterxml.jackson.dataformat.cbor.CBORParser",
                "method_name": "_bigNegative",
                "parameters": "(long)",
                "footprint": "com.fasterxml.jackson.dataformat.cbor.CBORParser._bigNegative(long)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 16,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.675488"
    },
    {
        "vulnerability": "CVE-2020-15250",
        "repository": "junit-team/junit4",
        "symbols": [
            {
                "class_name": "org.junit.Assert",
                "method_name": "assertNotEquals",
                "parameters": "(String, float, float, float)",
                "footprint": "org.junit.Assert.assertNotEquals(String, float, float, float)"
            },
            {
                "class_name": "org.junit.rules.TemporaryFolder",
                "method_name": "createTemporaryFolderIn",
                "parameters": "(File)",
                "footprint": "org.junit.rules.TemporaryFolder.createTemporaryFolderIn(File)"
            },
            {
                "class_name": "org.junit.runners.model.FrameworkField",
                "method_name": "<init>",
                "parameters": "(Field)",
                "footprint": "org.junit.runners.model.FrameworkField.<init>(Field)"
            },
            {
                "class_name": "junit.framework.Assert",
                "method_name": "assertEquals",
                "parameters": "(String, double, double, double)",
                "footprint": "junit.framework.Assert.assertEquals(String, double, double, double)"
            },
            {
                "class_name": "junit.framework.Assert",
                "method_name": "assertEquals",
                "parameters": "(String, float, float, float)",
                "footprint": "junit.framework.Assert.assertEquals(String, float, float, float)"
            },
            {
                "class_name": "junit.runner.Version",
                "method_name": "id",
                "parameters": "()",
                "footprint": "junit.runner.Version.id()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 16,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.675603"
    },
    {
        "vulnerability": "CVE-2020-15252",
        "repository": "xwiki/xwiki-platform",
        "symbols": [
            {
                "class_name": "org.xwiki.search.solr.internal.EmbeddedSolr",
                "method_name": "createSearchCore",
                "parameters": "()",
                "footprint": "org.xwiki.search.solr.internal.EmbeddedSolr.createSearchCore()"
            },
            {
                "class_name": "org.xwiki.mentions.internal.DefaultMentionsConfiguration",
                "method_name": "getMentionsColor",
                "parameters": "()",
                "footprint": "org.xwiki.mentions.internal.DefaultMentionsConfiguration.getMentionsColor()"
            },
            {
                "class_name": "org.xwiki.mentions.internal.DefaultMentionsConfiguration",
                "method_name": "getSelfMentionsColor",
                "parameters": "()",
                "footprint": "org.xwiki.mentions.internal.DefaultMentionsConfiguration.getSelfMentionsColor()"
            },
            {
                "class_name": "com.xpn.xwiki.web.SaveAction",
                "method_name": "save",
                "parameters": "(XWikiContext)",
                "footprint": "com.xpn.xwiki.web.SaveAction.save(XWikiContext)"
            },
            {
                "class_name": "com.xpn.xwiki.web.CreateAction",
                "method_name": "doCreate",
                "parameters": "(XWikiContext, XWikiDocument, boolean, BaseObject)",
                "footprint": "com.xpn.xwiki.web.CreateAction.doCreate(XWikiContext, XWikiDocument, boolean, BaseObject)"
            },
            {
                "class_name": "com.xpn.xwiki.web.CreateAction",
                "method_name": "getEditMode",
                "parameters": "(String, DocumentReferenceResolver, XWikiContext)",
                "footprint": "com.xpn.xwiki.web.CreateAction.getEditMode(String, DocumentReferenceResolver, XWikiContext)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 16,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.675789"
    },
    {
        "vulnerability": "CVE-2020-8919",
        "repository": "GerritCodeReview/gerrit",
        "symbols": [],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 0,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.675857"
    },
    {
        "vulnerability": "CVE-2020-8920",
        "repository": "GerritCodeReview/gerrit",
        "symbols": [
            {
                "class_name": "com.google.gerrit.server.project.ProjectControl",
                "method_name": "<init>",
                "parameters": "(Set, Set, ProjectCache, PermissionCollection.Factory, ChangeNotes.Factory, ChangeControl.Factory, TagCache, Provider, SearchingChangeCacheImpl, String, CurrentUser, ProjectState, Metrics)",
                "footprint": "com.google.gerrit.server.project.ProjectControl.<init>(Set, Set, ProjectCache, PermissionCollection.Factory, ChangeNotes.Factory, ChangeControl.Factory, TagCache, Provider, SearchingChangeCacheImpl, String, CurrentUser, ProjectState, Metrics)"
            },
            {
                "class_name": "com.google.gerrit.server.project.ProjectControl",
                "method_name": "allRefsAreVisible",
                "parameters": "(Set)",
                "footprint": "com.google.gerrit.server.project.ProjectControl.allRefsAreVisible(Set)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 50,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.675898"
    },
    {
        "vulnerability": "CVE-2020-26258",
        "repository": "x-stream/xstream",
        "symbols": [
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupSecurity",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupSecurity()"
            },
            {
                "class_name": "com.thoughtworks.xstream.mapper.DefaultMapper",
                "method_name": "realClass",
                "parameters": "(String)",
                "footprint": "com.thoughtworks.xstream.mapper.DefaultMapper.realClass(String)"
            },
            {
                "class_name": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder.<clinit>()"
            },
            {
                "class_name": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder",
                "method_name": "encodeName",
                "parameters": "(String)",
                "footprint": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder.encodeName(String)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 25,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.675963"
    },
    {
        "vulnerability": "CVE-2020-26259",
        "repository": "x-stream/xstream",
        "symbols": [
            {
                "class_name": "com.thoughtworks.xstream.XStream",
                "method_name": "setupSecurity",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.XStream.setupSecurity()"
            },
            {
                "class_name": "com.thoughtworks.xstream.mapper.DefaultMapper",
                "method_name": "realClass",
                "parameters": "(String)",
                "footprint": "com.thoughtworks.xstream.mapper.DefaultMapper.realClass(String)"
            },
            {
                "class_name": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder.<clinit>()"
            },
            {
                "class_name": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder",
                "method_name": "encodeName",
                "parameters": "(String)",
                "footprint": "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder.encodeName(String)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 25,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.676081"
    },
    {
        "vulnerability": "CVE-2019-10797",
        "repository": "wso2/transport-http",
        "symbols": [
            {
                "class_name": "org.wso2.transport.http.netty.contractimpl.common.Util",
                "method_name": "createHttpResponse",
                "parameters": "(HttpCarbonMessage, String, String, boolean)",
                "footprint": "org.wso2.transport.http.netty.contractimpl.common.Util.createHttpResponse(HttpCarbonMessage, String, String, boolean)"
            },
            {
                "class_name": "org.wso2.transport.http.netty.contractimpl.common.Util",
                "method_name": "createFullHttpResponse",
                "parameters": "(HttpCarbonMessage, String, String, boolean, ByteBuf)",
                "footprint": "org.wso2.transport.http.netty.contractimpl.common.Util.createFullHttpResponse(HttpCarbonMessage, String, String, boolean, ByteBuf)"
            },
            {
                "class_name": "org.wso2.transport.http.netty.contractimpl.common.Util",
                "method_name": "createHttpRequest",
                "parameters": "(HttpCarbonMessage)",
                "footprint": "org.wso2.transport.http.netty.contractimpl.common.Util.createHttpRequest(HttpCarbonMessage)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 33,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.676272"
    },
    {
        "vulnerability": "CVE-2018-1002200",
        "repository": "codehaus-plexus/plexus-archiver",
        "symbols": [
            {
                "class_name": "org.codehaus.plexus.archiver.AbstractUnArchiver",
                "method_name": "extractFile",
                "parameters": "(File, File, InputStream, String, Date, boolean, Integer, String)",
                "footprint": "org.codehaus.plexus.archiver.AbstractUnArchiver.extractFile(File, File, InputStream, String, Date, boolean, Integer, String)"
            },
            {
                "class_name": "org.codehaus.plexus.archiver.AbstractArchiver",
                "method_name": "createArchive",
                "parameters": "()",
                "footprint": "org.codehaus.plexus.archiver.AbstractArchiver.createArchive()"
            },
            {
                "class_name": "org.codehaus.plexus.archiver.zip.ZipFileResourceIterator",
                "method_name": "close",
                "parameters": "()",
                "footprint": "org.codehaus.plexus.archiver.zip.ZipFileResourceIterator.close()"
            },
            {
                "class_name": "org.codehaus.plexus.archiver.zip.AbstractZipArchiver",
                "method_name": "zipFile",
                "parameters": "(InputStreamSupplier, ConcurrentJarCreator, String, long, File, int, String, boolean)",
                "footprint": "org.codehaus.plexus.archiver.zip.AbstractZipArchiver.zipFile(InputStreamSupplier, ConcurrentJarCreator, String, long, File, int, String, boolean)"
            },
            {
                "class_name": "org.codehaus.plexus.archiver.zip.AbstractZipArchiver",
                "method_name": "zipDir",
                "parameters": "(PlexusIoResource, ConcurrentJarCreator, String, int, String)",
                "footprint": "org.codehaus.plexus.archiver.zip.AbstractZipArchiver.zipDir(PlexusIoResource, ConcurrentJarCreator, String, int, String)"
            },
            {
                "class_name": "org.codehaus.plexus.archiver.jar.JarArchiver",
                "method_name": "zipFile",
                "parameters": "(InputStreamSupplier, ConcurrentJarCreator, String, long, File, int, String, boolean)",
                "footprint": "org.codehaus.plexus.archiver.jar.JarArchiver.zipFile(InputStreamSupplier, ConcurrentJarCreator, String, long, File, int, String, boolean)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 16,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.676369"
    },
    {
        "vulnerability": "CVE-2018-20222",
        "repository": "airsonic/airsonic",
        "symbols": [
            {
                "class_name": "org.airsonic.player.service.SecurityService",
                "method_name": "loadUserByUsername",
                "parameters": "(String, boolean)",
                "footprint": "org.airsonic.player.service.SecurityService.loadUserByUsername(String, boolean)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.676447"
    },
    {
        "vulnerability": "CVE-2018-5968",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.<clinit>()"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
                "method_name": "createBeanDeserializer",
                "parameters": "(DeserializationContext, JavaType, BeanDescription)",
                "footprint": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(DeserializationContext, JavaType, BeanDescription)"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
                "method_name": "checkIllegalTypes",
                "parameters": "(DeserializationContext, JavaType, BeanDescription)",
                "footprint": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.checkIllegalTypes(DeserializationContext, JavaType, BeanDescription)"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
                "method_name": "findObjectReferenceInfo",
                "parameters": "(Annotated, ObjectIdInfo)",
                "footprint": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findObjectReferenceInfo(Annotated, ObjectIdInfo)"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory.<clinit>()"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory.<clinit>()"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
                "method_name": "createContextual",
                "parameters": "(SerializerProvider, BeanProperty)",
                "footprint": "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.createContextual(SerializerProvider, BeanProperty)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 14,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.676529"
    },
    {
        "vulnerability": "CVE-2016-10027",
        "repository": "igniterealtime/Smack",
        "symbols": [
            {
                "class_name": "org.jivesoftware.smack.AbstractXMPPConnection",
                "method_name": "connect",
                "parameters": "()",
                "footprint": "org.jivesoftware.smack.AbstractXMPPConnection.connect()"
            },
            {
                "class_name": "org.jivesoftware.smack.sasl.core.SCRAMSHA1Mechanism",
                "method_name": "isPrintableNonCommaAsciiChar",
                "parameters": "(char)",
                "footprint": "org.jivesoftware.smack.sasl.core.SCRAMSHA1Mechanism.isPrintableNonCommaAsciiChar(char)"
            },
            {
                "class_name": "org.jivesoftware.smack.tcp.XMPPTCPConnection",
                "method_name": "connectInternal",
                "parameters": "()",
                "footprint": "org.jivesoftware.smack.tcp.XMPPTCPConnection.connectInternal()"
            },
            {
                "class_name": "org.jivesoftware.smack.tcp.XMPPTCPConnection",
                "method_name": "afterFeaturesReceived",
                "parameters": "()",
                "footprint": "org.jivesoftware.smack.tcp.XMPPTCPConnection.afterFeaturesReceived()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 25,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.676685"
    },
    {
        "vulnerability": "CVE-2020-15124",
        "repository": "intranda/goobi-viewer-core",
        "symbols": [
            {
                "class_name": "io.goobi.viewer.controller.DataFileTools",
                "method_name": "getDataFilePath",
                "parameters": "(String, String, String, String)",
                "footprint": "io.goobi.viewer.controller.DataFileTools.getDataFilePath(String, String, String, String)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.676790"
    },
    {
        "vulnerability": "CVE-2020-24616",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<clinit>()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.676826"
    },
    {
        "vulnerability": "CVE-2017-15095",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.JsonNode",
                "method_name": "decimalValue",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.JsonNode.decimalValue()"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.ser.std.Dynamic",
                "method_name": "_findAndAddDynamic",
                "parameters": "(PropertySerializerMap, Class, SerializerProvider)",
                "footprint": "com.fasterxml.jackson.databind.ser.std.Dynamic._findAndAddDynamic(PropertySerializerMap, Class, SerializerProvider)"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.util.StdDateFormat.<clinit>()"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
                "method_name": "parseAsISO8601",
                "parameters": "(String, ParsePosition, boolean)",
                "footprint": "com.fasterxml.jackson.databind.util.StdDateFormat.parseAsISO8601(String, ParsePosition, boolean)"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
                "method_name": "_clearFormats",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.util.StdDateFormat._clearFormats()"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",
                "method_name": "_typeFromId",
                "parameters": "(String, DatabindContext)",
                "footprint": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver._typeFromId(String, DatabindContext)"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.type.ResolvedRecursiveType",
                "method_name": "equals",
                "parameters": "(Object)",
                "footprint": "com.fasterxml.jackson.databind.type.ResolvedRecursiveType.equals(Object)"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.node.TextNode",
                "method_name": "serialize",
                "parameters": "(JsonGenerator, SerializerProvider)",
                "footprint": "com.fasterxml.jackson.databind.node.TextNode.serialize(JsonGenerator, SerializerProvider)"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
                "method_name": "deserializeFromString",
                "parameters": "(JsonParser, DeserializationContext)",
                "footprint": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromString(JsonParser, DeserializationContext)"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
                "method_name": "deserializeFromEmbedded",
                "parameters": "(JsonParser, DeserializationContext)",
                "footprint": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromEmbedded(JsonParser, DeserializationContext)"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.<clinit>()"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer",
                "method_name": "deserialize",
                "parameters": "(JsonParser, DeserializationContext)",
                "footprint": "com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer.deserialize(JsonParser, DeserializationContext)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 8,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.676991"
    },
    {
        "vulnerability": "CVE-2018-12541",
        "repository": "eclipse-vertx/vert.x",
        "symbols": [
            {
                "class_name": "io.vertx.core.http.impl.NettyFileUploadDataFactory",
                "method_name": "<init>",
                "parameters": "(Context, long, HttpServerRequest, Supplier)",
                "footprint": "io.vertx.core.http.impl.NettyFileUploadDataFactory.<init>(Context, long, HttpServerRequest, Supplier)"
            },
            {
                "class_name": "io.vertx.core.http.impl.NettyFileUploadDataFactory",
                "method_name": "createAttribute",
                "parameters": "(HttpRequest, String)",
                "footprint": "io.vertx.core.http.impl.NettyFileUploadDataFactory.createAttribute(HttpRequest, String)"
            },
            {
                "class_name": "io.vertx.core.http.impl.NettyFileUploadDataFactory",
                "method_name": "createAttribute",
                "parameters": "(HttpRequest, String, long)",
                "footprint": "io.vertx.core.http.impl.NettyFileUploadDataFactory.createAttribute(HttpRequest, String, long)"
            },
            {
                "class_name": "io.vertx.core.http.impl.NettyFileUploadDataFactory",
                "method_name": "createAttribute",
                "parameters": "(HttpRequest, String, String)",
                "footprint": "io.vertx.core.http.impl.NettyFileUploadDataFactory.createAttribute(HttpRequest, String, String)"
            },
            {
                "class_name": "io.vertx.core.http.impl.NettyFileUploadDataFactory",
                "method_name": "createFileUpload",
                "parameters": "(HttpRequest, String, String, String, String, Charset, long)",
                "footprint": "io.vertx.core.http.impl.NettyFileUploadDataFactory.createFileUpload(HttpRequest, String, String, String, String, Charset, long)"
            },
            {
                "class_name": "io.vertx.core.http.impl.VertxAttribute",
                "method_name": "<init>",
                "parameters": "(String, long)",
                "footprint": "io.vertx.core.http.impl.VertxAttribute.<init>(String, long)"
            },
            {
                "class_name": "io.vertx.core.http.impl.VertxAttribute",
                "method_name": "setCompleted",
                "parameters": "()",
                "footprint": "io.vertx.core.http.impl.VertxAttribute.setCompleted()"
            },
            {
                "class_name": "io.vertx.core.http.impl.VertxAttribute",
                "method_name": "getValue",
                "parameters": "()",
                "footprint": "io.vertx.core.http.impl.VertxAttribute.getValue()"
            },
            {
                "class_name": "io.vertx.core.http.impl.Http2ServerRequestImpl",
                "method_name": "setExpectMultipart",
                "parameters": "(boolean)",
                "footprint": "io.vertx.core.http.impl.Http2ServerRequestImpl.setExpectMultipart(boolean)"
            },
            {
                "class_name": "io.vertx.core.http.impl.HttpServerRequestImpl",
                "method_name": "setExpectMultipart",
                "parameters": "(boolean)",
                "footprint": "io.vertx.core.http.impl.HttpServerRequestImpl.setExpectMultipart(boolean)"
            },
            {
                "class_name": "io.vertx.core.http.impl.headers.VertxHttpHeaders",
                "method_name": "add",
                "parameters": "(CharSequence, Object)",
                "footprint": "io.vertx.core.http.impl.headers.VertxHttpHeaders.add(CharSequence, Object)"
            },
            {
                "class_name": "io.vertx.core.http.impl.headers.VertxHttpHeaders",
                "method_name": "add",
                "parameters": "(String, Object)",
                "footprint": "io.vertx.core.http.impl.headers.VertxHttpHeaders.add(String, Object)"
            },
            {
                "class_name": "io.vertx.core.http.impl.headers.VertxHttpHeaders",
                "method_name": "add",
                "parameters": "(CharSequence, Iterable)",
                "footprint": "io.vertx.core.http.impl.headers.VertxHttpHeaders.add(CharSequence, Iterable)"
            },
            {
                "class_name": "io.vertx.core.http.impl.headers.VertxHttpHeaders",
                "method_name": "set",
                "parameters": "(String, Object)",
                "footprint": "io.vertx.core.http.impl.headers.VertxHttpHeaders.set(String, Object)"
            },
            {
                "class_name": "io.vertx.core.http.impl.headers.VertxHttpHeaders",
                "method_name": "set",
                "parameters": "(CharSequence, Object)",
                "footprint": "io.vertx.core.http.impl.headers.VertxHttpHeaders.set(CharSequence, Object)"
            },
            {
                "class_name": "io.vertx.core.http.impl.headers.VertxHttpHeaders",
                "method_name": "set",
                "parameters": "(CharSequence, Iterable)",
                "footprint": "io.vertx.core.http.impl.headers.VertxHttpHeaders.set(CharSequence, Iterable)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 6,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.677831"
    },
    {
        "vulnerability": "CVE-2017-14949",
        "repository": "restlet/restlet-framework-java",
        "symbols": [
            {
                "class_name": "org.restlet.ext.xml.XmlRepresentation",
                "method_name": "getDocumentBuilder",
                "parameters": "()",
                "footprint": "org.restlet.ext.xml.XmlRepresentation.getDocumentBuilder()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.677997"
    },
    {
        "vulnerability": "CVE-2018-12418",
        "repository": "junrar/junrar",
        "symbols": [
            {
                "class_name": "com.github.junrar.Archive",
                "method_name": "readHeaders",
                "parameters": "(long)",
                "footprint": "com.github.junrar.Archive.readHeaders(long)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.678034"
    },
    {
        "vulnerability": "CVE-2018-7489",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<clinit>()"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
                "method_name": "validateSubType",
                "parameters": "(DeserializationContext, JavaType)",
                "footprint": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(DeserializationContext, JavaType)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 50,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.678095"
    },
    {
        "vulnerability": "CVE-2017-7525",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
                "method_name": "_addDeserializerFactoryMethods",
                "parameters": "(DeserializationContext, BeanDescription, VisibilityChecker, AnnotationIntrospector, CreatorCollector, Map)",
                "footprint": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._addDeserializerFactoryMethods(DeserializationContext, BeanDescription, VisibilityChecker, AnnotationIntrospector, CreatorCollector, Map)"
            },
            {
                "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
                "method_name": "createBeanDeserializer",
                "parameters": "(DeserializationContext, JavaType, BeanDescription)",
                "footprint": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(DeserializationContext, JavaType, BeanDescription)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 50,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.678149"
    },
    {
        "vulnerability": "CVE-2020-12760",
        "repository": "OpenNMS/opennms",
        "symbols": [
            {
                "class_name": "org.opennms.core.ipc.sink.common.AbstractMessageConsumerManager",
                "method_name": "<init>",
                "parameters": "()",
                "footprint": "org.opennms.core.ipc.sink.common.AbstractMessageConsumerManager.<init>()"
            },
            {
                "class_name": "org.opennms.core.ipc.sink.common.AbstractMessageConsumerManager",
                "method_name": "registerConsumer",
                "parameters": "(MessageConsumer)",
                "footprint": "org.opennms.core.ipc.sink.common.AbstractMessageConsumerManager.registerConsumer(MessageConsumer)"
            },
            {
                "class_name": "org.opennms.core.ipc.sink.common.AbstractMessageConsumerManager",
                "method_name": "getNumConsumerThreads",
                "parameters": "(SinkModule)",
                "footprint": "org.opennms.core.ipc.sink.common.AbstractMessageConsumerManager.getNumConsumerThreads(SinkModule)"
            },
            {
                "class_name": "org.opennms.netmgt.poller.PollerEventProcessor",
                "method_name": "nodeGainedServiceHandler",
                "parameters": "(Event)",
                "footprint": "org.opennms.netmgt.poller.PollerEventProcessor.nodeGainedServiceHandler(Event)"
            },
            {
                "class_name": "org.opennms.netmgt.poller.PollerEventProcessor",
                "method_name": "serviceReschedule",
                "parameters": "(Long, String, String, Event, boolean)",
                "footprint": "org.opennms.netmgt.poller.PollerEventProcessor.serviceReschedule(Long, String, String, Event, boolean)"
            },
            {
                "class_name": "org.opennms.netmgt.poller.Poller",
                "method_name": "scheduleService",
                "parameters": "(int, String, String, String, String)",
                "footprint": "org.opennms.netmgt.poller.Poller.scheduleService(int, String, String, String, String)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 16,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.678248"
    },
    {
        "vulnerability": "CVE-2020-13973",
        "repository": "OWASP/json-sanitizer",
        "symbols": [
            {
                "class_name": "com.google.json.JsonSanitizer",
                "method_name": "sanitizeString",
                "parameters": "(int, int)",
                "footprint": "com.google.json.JsonSanitizer.sanitizeString(int, int)"
            },
            {
                "class_name": "com.google.json.JsonSanitizer",
                "method_name": "normalizeNumber",
                "parameters": "(int, int)",
                "footprint": "com.google.json.JsonSanitizer.normalizeNumber(int, int)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 50,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.678332"
    },
    {
        "vulnerability": "CVE-2018-14721",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.<clinit>()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.678375"
    },
    {
        "vulnerability": "CVE-2018-1000873",
        "repository": "FasterXML/jackson-modules-java8",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.datatype.jsr310.DecimalUtils",
                "method_name": "<init>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.datatype.jsr310.DecimalUtils.<init>()"
            },
            {
                "class_name": "com.fasterxml.jackson.datatype.jsr310.DecimalUtils",
                "method_name": "toDecimal",
                "parameters": "(long, int)",
                "footprint": "com.fasterxml.jackson.datatype.jsr310.DecimalUtils.toDecimal(long, int)"
            },
            {
                "class_name": "com.fasterxml.jackson.datatype.jsr310.DecimalUtils",
                "method_name": "extractNanosecondDecimal",
                "parameters": "(BigDecimal, long)",
                "footprint": "com.fasterxml.jackson.datatype.jsr310.DecimalUtils.extractNanosecondDecimal(BigDecimal, long)"
            },
            {
                "class_name": "com.fasterxml.jackson.datatype.jsr310.deser.DurationDeserializer",
                "method_name": "deserialize",
                "parameters": "(JsonParser, DeserializationContext)",
                "footprint": "com.fasterxml.jackson.datatype.jsr310.deser.DurationDeserializer.deserialize(JsonParser, DeserializationContext)"
            },
            {
                "class_name": "com.fasterxml.jackson.datatype.jsr310.deser.InstantDeserializer<T>",
                "method_name": "deserialize",
                "parameters": "(JsonParser, DeserializationContext)",
                "footprint": "com.fasterxml.jackson.datatype.jsr310.deser.InstantDeserializer<T>.deserialize(JsonParser, DeserializationContext)"
            },
            {
                "class_name": "com.fasterxml.jackson.datatype.jsr310.deser.InstantDeserializer<T>",
                "method_name": "_fromDecimal",
                "parameters": "(DeserializationContext, BigDecimal)",
                "footprint": "com.fasterxml.jackson.datatype.jsr310.deser.InstantDeserializer<T>._fromDecimal(DeserializationContext, BigDecimal)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 16,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.678447"
    },
    {
        "vulnerability": "CVE-2018-1000822",
        "repository": "codelibs/fess",
        "symbols": [
            {
                "class_name": "org.codelibs.fess.thumbnail.impl.HtmlTagBasedGenerator",
                "method_name": "generate",
                "parameters": "(String, File)",
                "footprint": "org.codelibs.fess.thumbnail.impl.HtmlTagBasedGenerator.generate(String, File)"
            },
            {
                "class_name": "org.codelibs.fess.thumbnail.impl.HtmlTagBasedGenerator",
                "method_name": "saveImage",
                "parameters": "(ImageInputStream, File)",
                "footprint": "org.codelibs.fess.thumbnail.impl.HtmlTagBasedGenerator.saveImage(ImageInputStream, File)"
            },
            {
                "class_name": "org.codelibs.fess.util.GsaConfigParser",
                "method_name": "parse",
                "parameters": "(InputSource)",
                "footprint": "org.codelibs.fess.util.GsaConfigParser.parse(InputSource)"
            },
            {
                "class_name": "org.codelibs.fess.mylasta.direction.FessProp",
                "method_name": "isAvailableSmbSidType",
                "parameters": "(int)",
                "footprint": "org.codelibs.fess.mylasta.direction.FessProp.isAvailableSmbSidType(int)"
            },
            {
                "class_name": "org.codelibs.fess.timer.SystemMonitorTarget",
                "method_name": "appendElasticsearchStats",
                "parameters": "(StringBuilder)",
                "footprint": "org.codelibs.fess.timer.SystemMonitorTarget.appendElasticsearchStats(StringBuilder)"
            },
            {
                "class_name": "org.codelibs.fess.entity.PingResponse",
                "method_name": "<init>",
                "parameters": "(ClusterHealthResponse)",
                "footprint": "org.codelibs.fess.entity.PingResponse.<init>(ClusterHealthResponse)"
            },
            {
                "class_name": "org.codelibs.fess.helper.SambaHelper",
                "method_name": "getAccountId",
                "parameters": "(SID)",
                "footprint": "org.codelibs.fess.helper.SambaHelper.getAccountId(SID)"
            },
            {
                "class_name": "org.codelibs.fess.api.json.JsonApiManager",
                "method_name": "toGeoRequestString",
                "parameters": "(GeoInfo)",
                "footprint": "org.codelibs.fess.api.json.JsonApiManager.toGeoRequestString(GeoInfo)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 12,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.678575"
    },
    {
        "vulnerability": "CVE-2018-9159",
        "repository": "perwendel/spark",
        "symbols": [
            {
                "class_name": "spark.Service",
                "method_name": "secure",
                "parameters": "(String, String, String, String)",
                "footprint": "spark.Service.secure(String, String, String, String)"
            },
            {
                "class_name": "spark.Service",
                "method_name": "secure",
                "parameters": "(String, String, String, String, boolean)",
                "footprint": "spark.Service.secure(String, String, String, String, boolean)"
            },
            {
                "class_name": "spark.ssl.SslStores",
                "method_name": "create",
                "parameters": "(String, String, String, String)",
                "footprint": "spark.ssl.SslStores.create(String, String, String, String)"
            },
            {
                "class_name": "spark.ssl.SslStores",
                "method_name": "create",
                "parameters": "(String, String, String, String, boolean)",
                "footprint": "spark.ssl.SslStores.create(String, String, String, String, boolean)"
            },
            {
                "class_name": "spark.ssl.SslStores",
                "method_name": "<init>",
                "parameters": "(String, String, String, String)",
                "footprint": "spark.ssl.SslStores.<init>(String, String, String, String)"
            },
            {
                "class_name": "spark.ssl.SslStores",
                "method_name": "<init>",
                "parameters": "(String, String, String, String, boolean)",
                "footprint": "spark.ssl.SslStores.<init>(String, String, String, String, boolean)"
            },
            {
                "class_name": "spark.embeddedserver.jetty.SocketConnectorFactory",
                "method_name": "createSecureSocketConnector",
                "parameters": "(Server, String, int, SslStores)",
                "footprint": "spark.embeddedserver.jetty.SocketConnectorFactory.createSecureSocketConnector(Server, String, int, SslStores)"
            },
            {
                "class_name": "spark.resource.ClassPathResource",
                "method_name": "<init>",
                "parameters": "(String, ClassLoader)",
                "footprint": "spark.resource.ClassPathResource.<init>(String, ClassLoader)"
            },
            {
                "class_name": "spark.resource.ClassPathResource",
                "method_name": "exists",
                "parameters": "()",
                "footprint": "spark.resource.ClassPathResource.exists()"
            },
            {
                "class_name": "spark.resource.ClassPathResource",
                "method_name": "getInputStream",
                "parameters": "()",
                "footprint": "spark.resource.ClassPathResource.getInputStream()"
            },
            {
                "class_name": "spark.resource.ClassPathResource",
                "method_name": "getURL",
                "parameters": "()",
                "footprint": "spark.resource.ClassPathResource.getURL()"
            },
            {
                "class_name": "spark.resource.ClassPathResource",
                "method_name": "createRelative",
                "parameters": "(String)",
                "footprint": "spark.resource.ClassPathResource.createRelative(String)"
            },
            {
                "class_name": "spark.resource.ClassPathResource",
                "method_name": "getFilename",
                "parameters": "()",
                "footprint": "spark.resource.ClassPathResource.getFilename()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 7,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.678757"
    },
    {
        "vulnerability": "CVE-2019-14892",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<clinit>()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.678891"
    },
    {
        "vulnerability": "CVE-2019-14893",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<clinit>()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.678925"
    },
    {
        "vulnerability": "CVE-2020-11002",
        "repository": "dropwizard/dropwizard",
        "symbols": [
            {
                "class_name": "io.dropwizard.validation.selfvalidating.ViolationCollector",
                "method_name": "<init>",
                "parameters": "(ConstraintValidatorContext)",
                "footprint": "io.dropwizard.validation.selfvalidating.ViolationCollector.<init>(ConstraintValidatorContext)"
            },
            {
                "class_name": "io.dropwizard.validation.selfvalidating.ViolationCollector",
                "method_name": "addViolation",
                "parameters": "(String)",
                "footprint": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String)"
            },
            {
                "class_name": "io.dropwizard.validation.selfvalidating.ViolationCollector",
                "method_name": "addViolation",
                "parameters": "(String, String)",
                "footprint": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String, String)"
            },
            {
                "class_name": "io.dropwizard.validation.selfvalidating.ViolationCollector",
                "method_name": "addViolation",
                "parameters": "(String, Integer, String)",
                "footprint": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String, Integer, String)"
            },
            {
                "class_name": "io.dropwizard.validation.selfvalidating.ViolationCollector",
                "method_name": "addViolation",
                "parameters": "(String, String, String)",
                "footprint": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String, String, String)"
            },
            {
                "class_name": "io.dropwizard.validation.selfvalidating.ViolationCollector",
                "method_name": "escapeEl",
                "parameters": "(String)",
                "footprint": "io.dropwizard.validation.selfvalidating.ViolationCollector.escapeEl(String)"
            },
            {
                "class_name": "io.dropwizard.validation.selfvalidating.ViolationCollector",
                "method_name": "getContext",
                "parameters": "()",
                "footprint": "io.dropwizard.validation.selfvalidating.ViolationCollector.getContext()"
            },
            {
                "class_name": "io.dropwizard.validation.selfvalidating.SelfValidating",
                "method_name": "payload",
                "parameters": "()",
                "footprint": "io.dropwizard.validation.selfvalidating.SelfValidating.payload()"
            },
            {
                "class_name": "io.dropwizard.validation.selfvalidating.SelfValidatingValidator",
                "method_name": "initialize",
                "parameters": "(SelfValidating)",
                "footprint": "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.initialize(SelfValidating)"
            },
            {
                "class_name": "io.dropwizard.validation.selfvalidating.SelfValidatingValidator",
                "method_name": "isValid",
                "parameters": "(Object, ConstraintValidatorContext)",
                "footprint": "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.isValid(Object, ConstraintValidatorContext)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 10,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.679025"
    },
    {
        "vulnerability": "CVE-2020-5245",
        "repository": "dropwizard/dropwizard",
        "symbols": [
            {
                "class_name": "io.dropwizard.validation.selfvalidating.ViolationCollector",
                "method_name": "addViolation",
                "parameters": "(String)",
                "footprint": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.679153"
    },
    {
        "vulnerability": "CVE-2020-11612",
        "repository": "netty/netty",
        "symbols": [
            {
                "class_name": "io.netty.handler.codec.compression.ZlibDecoder",
                "method_name": "isClosed",
                "parameters": "()",
                "footprint": "io.netty.handler.codec.compression.ZlibDecoder.isClosed()"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JdkZlibDecoder",
                "method_name": "<init>",
                "parameters": "()",
                "footprint": "io.netty.handler.codec.compression.JdkZlibDecoder.<init>()"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JdkZlibDecoder",
                "method_name": "<init>",
                "parameters": "(byte[])",
                "footprint": "io.netty.handler.codec.compression.JdkZlibDecoder.<init>(byte[])"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JdkZlibDecoder",
                "method_name": "<init>",
                "parameters": "(ZlibWrapper)",
                "footprint": "io.netty.handler.codec.compression.JdkZlibDecoder.<init>(ZlibWrapper)"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JdkZlibDecoder",
                "method_name": "<init>",
                "parameters": "(ZlibWrapper, boolean)",
                "footprint": "io.netty.handler.codec.compression.JdkZlibDecoder.<init>(ZlibWrapper, boolean)"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JdkZlibDecoder",
                "method_name": "<init>",
                "parameters": "(boolean)",
                "footprint": "io.netty.handler.codec.compression.JdkZlibDecoder.<init>(boolean)"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JdkZlibDecoder",
                "method_name": "<init>",
                "parameters": "(ZlibWrapper, byte[], boolean)",
                "footprint": "io.netty.handler.codec.compression.JdkZlibDecoder.<init>(ZlibWrapper, byte[], boolean)"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JdkZlibDecoder",
                "method_name": "decode",
                "parameters": "(ChannelHandlerContext, ByteBuf, List)",
                "footprint": "io.netty.handler.codec.compression.JdkZlibDecoder.decode(ChannelHandlerContext, ByteBuf, List)"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JZlibDecoder",
                "method_name": "<init>",
                "parameters": "()",
                "footprint": "io.netty.handler.codec.compression.JZlibDecoder.<init>()"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JZlibDecoder",
                "method_name": "<init>",
                "parameters": "(ZlibWrapper)",
                "footprint": "io.netty.handler.codec.compression.JZlibDecoder.<init>(ZlibWrapper)"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JZlibDecoder",
                "method_name": "<init>",
                "parameters": "(byte[])",
                "footprint": "io.netty.handler.codec.compression.JZlibDecoder.<init>(byte[])"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JZlibDecoder",
                "method_name": "decode",
                "parameters": "(ChannelHandlerContext, ByteBuf, List)",
                "footprint": "io.netty.handler.codec.compression.JZlibDecoder.decode(ChannelHandlerContext, ByteBuf, List)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 8,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.679305"
    },
    {
        "vulnerability": "CVE-2019-16869",
        "repository": "netty/netty",
        "symbols": [
            {
                "class_name": "io.netty.channel.epoll.EpollDomainSocketChannelConfig",
                "method_name": "getOptions",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.EpollDomainSocketChannelConfig.getOptions()"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDomainSocketChannelConfig",
                "method_name": "getOption",
                "parameters": "(ChannelOption)",
                "footprint": "io.netty.channel.epoll.EpollDomainSocketChannelConfig.getOption(ChannelOption)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDomainSocketChannelConfig",
                "method_name": "setOption",
                "parameters": "(ChannelOption, T)",
                "footprint": "io.netty.channel.epoll.EpollDomainSocketChannelConfig.setOption(ChannelOption, T)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDomainSocketChannelConfig",
                "method_name": "setAllowHalfClosure",
                "parameters": "(boolean)",
                "footprint": "io.netty.channel.epoll.EpollDomainSocketChannelConfig.setAllowHalfClosure(boolean)"
            },
            {
                "class_name": "io.netty.channel.epoll.AbstractEpollChannel",
                "method_name": "setFlag",
                "parameters": "(int)",
                "footprint": "io.netty.channel.epoll.AbstractEpollChannel.setFlag(int)"
            },
            {
                "class_name": "io.netty.channel.epoll.AbstractEpollChannel",
                "method_name": "clearFlag",
                "parameters": "(int)",
                "footprint": "io.netty.channel.epoll.AbstractEpollChannel.clearFlag(int)"
            },
            {
                "class_name": "io.netty.channel.epoll.AbstractEpollChannel",
                "method_name": "clearEpollIn",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.AbstractEpollChannel.clearEpollIn()"
            },
            {
                "class_name": "io.netty.channel.epoll.Anonymous",
                "method_name": "run",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.Anonymous.run()"
            },
            {
                "class_name": "io.netty.channel.epoll.AbstractEpollChannel",
                "method_name": "modifyEvents",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.AbstractEpollChannel.modifyEvents()"
            },
            {
                "class_name": "io.netty.channel.epoll.AbstractEpollUnsafe",
                "method_name": "epollInFinally",
                "parameters": "(ChannelConfig)",
                "footprint": "io.netty.channel.epoll.AbstractEpollUnsafe.epollInFinally(ChannelConfig)"
            },
            {
                "class_name": "io.netty.channel.epoll.AbstractEpollUnsafe",
                "method_name": "epollRdHupReady",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.AbstractEpollUnsafe.epollRdHupReady()"
            },
            {
                "class_name": "io.netty.channel.epoll.AbstractEpollUnsafe",
                "method_name": "clearEpollRdHup",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.AbstractEpollUnsafe.clearEpollRdHup()"
            },
            {
                "class_name": "io.netty.channel.epoll.AbstractEpollUnsafe",
                "method_name": "shutdownInput",
                "parameters": "(boolean)",
                "footprint": "io.netty.channel.epoll.AbstractEpollUnsafe.shutdownInput(boolean)"
            },
            {
                "class_name": "io.netty.channel.epoll.AbstractEpollUnsafe",
                "method_name": "clearEpollIn0",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.AbstractEpollUnsafe.clearEpollIn0()"
            },
            {
                "class_name": "io.netty.channel.epoll.AbstractEpollUnsafe",
                "method_name": "doFinishConnect",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.AbstractEpollUnsafe.doFinishConnect()"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollEventLoop",
                "method_name": "wakeup",
                "parameters": "(boolean)",
                "footprint": "io.netty.channel.epoll.EpollEventLoop.wakeup(boolean)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollEventLoop",
                "method_name": "add",
                "parameters": "(AbstractEpollChannel)",
                "footprint": "io.netty.channel.epoll.EpollEventLoop.add(AbstractEpollChannel)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollEventLoop",
                "method_name": "modify",
                "parameters": "(AbstractEpollChannel)",
                "footprint": "io.netty.channel.epoll.EpollEventLoop.modify(AbstractEpollChannel)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollEventLoop",
                "method_name": "remove",
                "parameters": "(AbstractEpollChannel)",
                "footprint": "io.netty.channel.epoll.EpollEventLoop.remove(AbstractEpollChannel)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollEventLoop",
                "method_name": "epollWaitNow",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.EpollEventLoop.epollWaitNow()"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollEventLoop",
                "method_name": "run",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.EpollEventLoop.run()"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollEventLoop",
                "method_name": "processReady",
                "parameters": "(EpollEventArray, int)",
                "footprint": "io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventArray, int)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollEventLoop",
                "method_name": "cleanup",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.EpollEventLoop.cleanup()"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDatagramChannel",
                "method_name": "doDisconnect",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.EpollDatagramChannel.doDisconnect()"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollChannelConfig",
                "method_name": "setEpollMode",
                "parameters": "(EpollMode)",
                "footprint": "io.netty.channel.epoll.EpollChannelConfig.setEpollMode(EpollMode)"
            },
            {
                "class_name": "io.netty.channel.epoll.Native",
                "method_name": "epollWait",
                "parameters": "(FileDescriptor, EpollEventArray, boolean)",
                "footprint": "io.netty.channel.epoll.Native.epollWait(FileDescriptor, EpollEventArray, boolean)"
            },
            {
                "class_name": "io.netty.channel.epoll.Native",
                "method_name": "epollWaitNoTimeout",
                "parameters": "(int, long, int, boolean)",
                "footprint": "io.netty.channel.epoll.Native.epollWaitNoTimeout(int, long, int, boolean)"
            },
            {
                "class_name": "io.netty.handler.stream.ChunkedNioFile",
                "method_name": "<init>",
                "parameters": "(FileChannel, long, long, int)",
                "footprint": "io.netty.handler.stream.ChunkedNioFile.<init>(FileChannel, long, long, int)"
            },
            {
                "class_name": "io.netty.handler.stream.ChunkedNioFile",
                "method_name": "readChunk",
                "parameters": "(ByteBufAllocator)",
                "footprint": "io.netty.handler.stream.ChunkedNioFile.readChunk(ByteBufAllocator)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslServerCertificateCallback",
                "method_name": "handle",
                "parameters": "(long, byte[], byte[][])",
                "footprint": "io.netty.handler.ssl.OpenSslServerCertificateCallback.handle(long, byte[], byte[][])"
            },
            {
                "class_name": "io.netty.handler.ssl.SslTasksRunner",
                "method_name": "resumeOnEventExecutor",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.SslTasksRunner.resumeOnEventExecutor()"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslClientCertificateCallback",
                "method_name": "handle",
                "parameters": "(long, byte[], byte[][])",
                "footprint": "io.netty.handler.ssl.OpenSslClientCertificateCallback.handle(long, byte[], byte[][])"
            },
            {
                "class_name": "io.netty.handler.ssl.SslMasterKeyHandler",
                "method_name": "userEventTriggered",
                "parameters": "(ChannelHandlerContext, Object)",
                "footprint": "io.netty.handler.ssl.SslMasterKeyHandler.userEventTriggered(ChannelHandlerContext, Object)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslKeyMaterialManager",
                "method_name": "setKeyMaterialServerSide",
                "parameters": "(ReferenceCountedOpenSslEngine)",
                "footprint": "io.netty.handler.ssl.OpenSslKeyMaterialManager.setKeyMaterialServerSide(ReferenceCountedOpenSslEngine)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslKeyMaterialManager",
                "method_name": "setKeyMaterial",
                "parameters": "(ReferenceCountedOpenSslEngine, String)",
                "footprint": "io.netty.handler.ssl.OpenSslKeyMaterialManager.setKeyMaterial(ReferenceCountedOpenSslEngine, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine",
                "method_name": "setKeyMaterial",
                "parameters": "(OpenSslKeyMaterial)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine.setKeyMaterial(OpenSslKeyMaterial)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine",
                "method_name": "setOcspResponse",
                "parameters": "(byte[])",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine.setOcspResponse(byte[])"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine",
                "method_name": "getOcspResponse",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine.getOcspResponse()"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine",
                "method_name": "wrap",
                "parameters": "(ByteBuffer[], int, int, ByteBuffer)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine.wrap(ByteBuffer[], int, int, ByteBuffer)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine",
                "method_name": "handshake",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine.handshake()"
            },
            {
                "class_name": "io.netty.handler.ssl.Anonymous",
                "method_name": "run",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.Anonymous.run()"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslContext",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslContext.<clinit>()"
            },
            {
                "class_name": "io.netty.handler.ssl.Anonymous",
                "method_name": "run",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.Anonymous.run()"
            },
            {
                "class_name": "io.netty.handler.ssl.AbstractCertificateVerifier",
                "method_name": "verify",
                "parameters": "(long, byte[][], String)",
                "footprint": "io.netty.handler.ssl.AbstractCertificateVerifier.verify(long, byte[][], String)"
            },
            {
                "class_name": "io.netty.handler.ssl.Conscrypt",
                "method_name": "isAvailable",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.Conscrypt.isAvailable()"
            },
            {
                "class_name": "io.netty.channel.AbstractUnsafe",
                "method_name": "disconnect",
                "parameters": "(ChannelPromise)",
                "footprint": "io.netty.channel.AbstractUnsafe.disconnect(ChannelPromise)"
            },
            {
                "class_name": "io.netty.channel.socket.nio.NioSocketChannelConfig",
                "method_name": "calculateMaxBytesPerGatheringWrite",
                "parameters": "()",
                "footprint": "io.netty.channel.socket.nio.NioSocketChannelConfig.calculateMaxBytesPerGatheringWrite()"
            },
            {
                "class_name": "io.netty.handler.codec.socksx.v5.Socks5InitialRequestDecoder",
                "method_name": "decode",
                "parameters": "(ChannelHandlerContext, ByteBuf, List)",
                "footprint": "io.netty.handler.codec.socksx.v5.Socks5InitialRequestDecoder.decode(ChannelHandlerContext, ByteBuf, List)"
            },
            {
                "class_name": "io.netty.util.DefaultResourceLeakDetectorFactory",
                "method_name": "<init>",
                "parameters": "()",
                "footprint": "io.netty.util.DefaultResourceLeakDetectorFactory.<init>()"
            },
            {
                "class_name": "io.netty.util.Anonymous",
                "method_name": "run",
                "parameters": "()",
                "footprint": "io.netty.util.Anonymous.run()"
            },
            {
                "class_name": "io.netty.util.concurrent.AbstractScheduledEventExecutor",
                "method_name": "schedule",
                "parameters": "(ScheduledFutureTask)",
                "footprint": "io.netty.util.concurrent.AbstractScheduledEventExecutor.schedule(ScheduledFutureTask)"
            },
            {
                "class_name": "io.netty.util.concurrent.Anonymous",
                "method_name": "run",
                "parameters": "()",
                "footprint": "io.netty.util.concurrent.Anonymous.run()"
            },
            {
                "class_name": "io.netty.util.concurrent.ScheduledFutureTask<V>",
                "method_name": "toStringBuilder",
                "parameters": "()",
                "footprint": "io.netty.util.concurrent.ScheduledFutureTask<V>.toStringBuilder()"
            },
            {
                "class_name": "io.netty.util.concurrent.NonStickyOrderedEventExecutor",
                "method_name": "run",
                "parameters": "()",
                "footprint": "io.netty.util.concurrent.NonStickyOrderedEventExecutor.run()"
            },
            {
                "class_name": "io.netty.channel.kqueue.KQueueDatagramChannel",
                "method_name": "doDisconnect",
                "parameters": "()",
                "footprint": "io.netty.channel.kqueue.KQueueDatagramChannel.doDisconnect()"
            },
            {
                "class_name": "io.netty.channel.kqueue.KQueueDomainSocketChannelConfig",
                "method_name": "getOptions",
                "parameters": "()",
                "footprint": "io.netty.channel.kqueue.KQueueDomainSocketChannelConfig.getOptions()"
            },
            {
                "class_name": "io.netty.channel.kqueue.KQueueDomainSocketChannelConfig",
                "method_name": "getOption",
                "parameters": "(ChannelOption)",
                "footprint": "io.netty.channel.kqueue.KQueueDomainSocketChannelConfig.getOption(ChannelOption)"
            },
            {
                "class_name": "io.netty.channel.kqueue.KQueueDomainSocketChannelConfig",
                "method_name": "setOption",
                "parameters": "(ChannelOption, T)",
                "footprint": "io.netty.channel.kqueue.KQueueDomainSocketChannelConfig.setOption(ChannelOption, T)"
            },
            {
                "class_name": "io.netty.handler.codec.http.QueryStringEncoder",
                "method_name": "<init>",
                "parameters": "(String, Charset)",
                "footprint": "io.netty.handler.codec.http.QueryStringEncoder.<init>(String, Charset)"
            },
            {
                "class_name": "io.netty.handler.codec.http.QueryStringEncoder",
                "method_name": "addParam",
                "parameters": "(String, String)",
                "footprint": "io.netty.handler.codec.http.QueryStringEncoder.addParam(String, String)"
            },
            {
                "class_name": "io.netty.handler.codec.http.QueryStringEncoder",
                "method_name": "appendComponent",
                "parameters": "(String, String, StringBuilder)",
                "footprint": "io.netty.handler.codec.http.QueryStringEncoder.appendComponent(String, String, StringBuilder)"
            },
            {
                "class_name": "io.netty.handler.codec.http.HttpObjectDecoder",
                "method_name": "splitHeader",
                "parameters": "(AppendableCharSequence)",
                "footprint": "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 1,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.679963"
    },
    {
        "vulnerability": "CVE-2019-20444",
        "repository": "netty/netty",
        "symbols": [
            {
                "class_name": "io.netty.handler.codec.http.HttpObjectDecoder",
                "method_name": "splitHeader",
                "parameters": "(AppendableCharSequence)",
                "footprint": "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.680746"
    },
    {
        "vulnerability": "CVE-2019-20445",
        "repository": "netty/netty",
        "symbols": [
            {
                "class_name": "io.netty.handler.codec.http.HttpObjectDecoder",
                "method_name": "readHeaders",
                "parameters": "(ByteBuf)",
                "footprint": "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.680785"
    },
    {
        "vulnerability": "CVE-2021-21290",
        "repository": "netty/netty",
        "symbols": [
            {
                "class_name": "io.netty.handler.codec.compression.JdkZlibDecoder",
                "method_name": "decode",
                "parameters": "(ChannelHandlerContext, ByteBuf, List)",
                "footprint": "io.netty.handler.codec.compression.JdkZlibDecoder.decode(ChannelHandlerContext, ByteBuf, List)"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JdkZlibDecoder",
                "method_name": "readGZIPHeader",
                "parameters": "(ByteBuf)",
                "footprint": "io.netty.handler.codec.compression.JdkZlibDecoder.readGZIPHeader(ByteBuf)"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JdkZlibDecoder",
                "method_name": "readGZIPFooter",
                "parameters": "(ByteBuf)",
                "footprint": "io.netty.handler.codec.compression.JdkZlibDecoder.readGZIPFooter(ByteBuf)"
            },
            {
                "class_name": "io.netty.handler.codec.compression.JdkZlibDecoder",
                "method_name": "verifyCrc",
                "parameters": "(ByteBuf)",
                "footprint": "io.netty.handler.codec.compression.JdkZlibDecoder.verifyCrc(ByteBuf)"
            },
            {
                "class_name": "io.netty.channel.epoll.Native",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.Native.<clinit>()"
            },
            {
                "class_name": "io.netty.handler.codec.http.DecodeHexBenchmark",
                "method_name": "init",
                "parameters": "()",
                "footprint": "io.netty.handler.codec.http.DecodeHexBenchmark.init()"
            },
            {
                "class_name": "io.netty.handler.codec.http.DecodeHexBenchmark",
                "method_name": "hexDigits",
                "parameters": "()",
                "footprint": "io.netty.handler.codec.http.DecodeHexBenchmark.hexDigits()"
            },
            {
                "class_name": "io.netty.handler.codec.http.DecodeHexBenchmark",
                "method_name": "hexDigitsWithChecks",
                "parameters": "()",
                "footprint": "io.netty.handler.codec.http.DecodeHexBenchmark.hexDigitsWithChecks()"
            },
            {
                "class_name": "io.netty.handler.codec.http.DecodeHexBenchmark",
                "method_name": "hexDigitsOriginal",
                "parameters": "()",
                "footprint": "io.netty.handler.codec.http.DecodeHexBenchmark.hexDigitsOriginal()"
            },
            {
                "class_name": "io.netty.channel.unix.Unix",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "io.netty.channel.unix.Unix.<clinit>()"
            },
            {
                "class_name": "io.netty.channel.unix.Unix",
                "method_name": "isAvailable",
                "parameters": "()",
                "footprint": "io.netty.channel.unix.Unix.isAvailable()"
            },
            {
                "class_name": "io.netty.channel.unix.Unix",
                "method_name": "ensureAvailability",
                "parameters": "()",
                "footprint": "io.netty.channel.unix.Unix.ensureAvailability()"
            },
            {
                "class_name": "io.netty.channel.unix.Unix",
                "method_name": "unavailabilityCause",
                "parameters": "()",
                "footprint": "io.netty.channel.unix.Unix.unavailabilityCause()"
            },
            {
                "class_name": "io.netty.util.internal.NativeLibraryLoader",
                "method_name": "loadFirstAvailable",
                "parameters": "(ClassLoader, String)",
                "footprint": "io.netty.util.internal.NativeLibraryLoader.loadFirstAvailable(ClassLoader, String)"
            },
            {
                "class_name": "io.netty.util.internal.NativeLibraryLoader",
                "method_name": "load",
                "parameters": "(String, ClassLoader)",
                "footprint": "io.netty.util.internal.NativeLibraryLoader.load(String, ClassLoader)"
            },
            {
                "class_name": "io.netty.util.internal.NativeLibraryLoader",
                "method_name": "loadLibrary",
                "parameters": "(ClassLoader, String, boolean)",
                "footprint": "io.netty.util.internal.NativeLibraryLoader.loadLibrary(ClassLoader, String, boolean)"
            },
            {
                "class_name": "io.netty.util.internal.NettyBlockHoundIntegration",
                "method_name": "applyTo",
                "parameters": "(BlockHound.Builder)",
                "footprint": "io.netty.util.internal.NettyBlockHoundIntegration.applyTo(BlockHound.Builder)"
            },
            {
                "class_name": "io.netty.util.concurrent.FastThreadLocal<V>",
                "method_name": "setKnownNotUnset",
                "parameters": "(InternalThreadLocalMap, V)",
                "footprint": "io.netty.util.concurrent.FastThreadLocal<V>.setKnownNotUnset(InternalThreadLocalMap, V)"
            },
            {
                "class_name": "io.netty.util.concurrent.FastThreadLocal<V>",
                "method_name": "remove",
                "parameters": "()",
                "footprint": "io.netty.util.concurrent.FastThreadLocal<V>.remove()"
            },
            {
                "class_name": "io.netty.util.concurrent.FastThreadLocal<V>",
                "method_name": "remove",
                "parameters": "(InternalThreadLocalMap)",
                "footprint": "io.netty.util.concurrent.FastThreadLocal<V>.remove(InternalThreadLocalMap)"
            },
            {
                "class_name": "io.netty.buffer.PoolSubpage<T>",
                "method_name": "free",
                "parameters": "(PoolSubpage, int)",
                "footprint": "io.netty.buffer.PoolSubpage<T>.free(PoolSubpage, int)"
            },
            {
                "class_name": "io.netty.buffer.ByteBufUtil",
                "method_name": "indexOf",
                "parameters": "(ByteBuf, int, int, byte)",
                "footprint": "io.netty.buffer.ByteBufUtil.indexOf(ByteBuf, int, int, byte)"
            },
            {
                "class_name": "io.netty.buffer.ByteBufUtil",
                "method_name": "firstIndexOf",
                "parameters": "(ByteBuf, int, int, byte)",
                "footprint": "io.netty.buffer.ByteBufUtil.firstIndexOf(ByteBuf, int, int, byte)"
            },
            {
                "class_name": "io.netty.buffer.ByteBufUtil",
                "method_name": "lastIndexOf",
                "parameters": "(ByteBuf, int, int, byte)",
                "footprint": "io.netty.buffer.ByteBufUtil.lastIndexOf(ByteBuf, int, int, byte)"
            },
            {
                "class_name": "io.netty.buffer.AbstractByteBuf",
                "method_name": "indexOf",
                "parameters": "(int, int, byte)",
                "footprint": "io.netty.buffer.AbstractByteBuf.indexOf(int, int, byte)"
            },
            {
                "class_name": "io.netty.buffer.AbstractByteBuf",
                "method_name": "firstIndexOf",
                "parameters": "(int, int, byte)",
                "footprint": "io.netty.buffer.AbstractByteBuf.firstIndexOf(int, int, byte)"
            },
            {
                "class_name": "io.netty.buffer.AbstractByteBuf",
                "method_name": "lastIndexOf",
                "parameters": "(int, int, byte)",
                "footprint": "io.netty.buffer.AbstractByteBuf.lastIndexOf(int, int, byte)"
            },
            {
                "class_name": "io.netty.bootstrap.Bootstrap",
                "method_name": "init",
                "parameters": "(Channel)",
                "footprint": "io.netty.bootstrap.Bootstrap.init(Channel)"
            },
            {
                "class_name": "io.netty.bootstrap.ServerBootstrap",
                "method_name": "init",
                "parameters": "(Channel)",
                "footprint": "io.netty.bootstrap.ServerBootstrap.init(Channel)"
            },
            {
                "class_name": "io.netty.bootstrap.AbstractBootstrap<B, C>",
                "method_name": "newOptionsArray",
                "parameters": "()",
                "footprint": "io.netty.bootstrap.AbstractBootstrap<B, C>.newOptionsArray()"
            },
            {
                "class_name": "io.netty.handler.codec.http2.FrameListener",
                "method_name": "onPriorityRead",
                "parameters": "(ChannelHandlerContext, int, int, short, boolean)",
                "footprint": "io.netty.handler.codec.http2.FrameListener.onPriorityRead(ChannelHandlerContext, int, int, short, boolean)"
            },
            {
                "class_name": "io.netty.handler.codec.http2.DefaultEndpoint<F>",
                "method_name": "checkNewStreamAllowed",
                "parameters": "(int, State)",
                "footprint": "io.netty.handler.codec.http2.DefaultEndpoint<F>.checkNewStreamAllowed(int, State)"
            },
            {
                "class_name": "io.netty.handler.codec.http2.DefaultHttp2PriorityFrame",
                "method_name": "stream",
                "parameters": "(Http2FrameStream)",
                "footprint": "io.netty.handler.codec.http2.DefaultHttp2PriorityFrame.stream(Http2FrameStream)"
            },
            {
                "class_name": "io.netty.handler.codec.http2.DefaultHttp2PriorityFrame",
                "method_name": "stream",
                "parameters": "()",
                "footprint": "io.netty.handler.codec.http2.DefaultHttp2PriorityFrame.stream()"
            },
            {
                "class_name": "io.netty.handler.codec.http2.DefaultHttp2PriorityFrame",
                "method_name": "name",
                "parameters": "()",
                "footprint": "io.netty.handler.codec.http2.DefaultHttp2PriorityFrame.name()"
            },
            {
                "class_name": "io.netty.handler.codec.http2.DefaultHttp2PriorityFrame",
                "method_name": "toString",
                "parameters": "()",
                "footprint": "io.netty.handler.codec.http2.DefaultHttp2PriorityFrame.toString()"
            },
            {
                "class_name": "io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler",
                "method_name": "handlePotentialUpgrade",
                "parameters": "(ChannelHandlerContext, ChannelPromise, HttpResponse)",
                "footprint": "io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler.handlePotentialUpgrade(ChannelHandlerContext, ChannelPromise, HttpResponse)"
            },
            {
                "class_name": "io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionUtil",
                "method_name": "appendExtension",
                "parameters": "(String, String, Map)",
                "footprint": "io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionUtil.appendExtension(String, String, Map)"
            },
            {
                "class_name": "io.netty.handler.codec.http.websocketx.extensions.WebSocketClientExtensionHandler",
                "method_name": "write",
                "parameters": "(ChannelHandlerContext, Object, ChannelPromise)",
                "footprint": "io.netty.handler.codec.http.websocketx.extensions.WebSocketClientExtensionHandler.write(ChannelHandlerContext, Object, ChannelPromise)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "offer",
                "parameters": "(HttpContent)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.offer(HttpContent)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "readLine",
                "parameters": "(ByteBuf, Charset)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.readLine(ByteBuf, Charset)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "readDelimiter",
                "parameters": "(ByteBuf, String)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.readDelimiter(ByteBuf, String)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "findDelimiter",
                "parameters": "(ByteBuf, String, int)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.findDelimiter(ByteBuf, String, int)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "loadDataMultipart",
                "parameters": "(ByteBuf, String, HttpData)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.loadDataMultipart(ByteBuf, String, HttpData)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder",
                "method_name": "offer",
                "parameters": "(HttpContent)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder.offer(HttpContent)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.AbstractDiskHttpData",
                "method_name": "tempFile",
                "parameters": "()",
                "footprint": "io.netty.handler.codec.http.multipart.AbstractDiskHttpData.tempFile()"
            },
            {
                "class_name": "io.netty.handler.codec.mqtt.PubAckBuilder",
                "method_name": "packetId",
                "parameters": "(short)",
                "footprint": "io.netty.handler.codec.mqtt.PubAckBuilder.packetId(short)"
            },
            {
                "class_name": "io.netty.handler.codec.mqtt.SubAckBuilder",
                "method_name": "packetId",
                "parameters": "(short)",
                "footprint": "io.netty.handler.codec.mqtt.SubAckBuilder.packetId(short)"
            },
            {
                "class_name": "io.netty.handler.codec.mqtt.UnsubAckBuilder",
                "method_name": "packetId",
                "parameters": "(short)",
                "footprint": "io.netty.handler.codec.mqtt.UnsubAckBuilder.packetId(short)"
            },
            {
                "class_name": "io.netty.handler.ssl.KeyManagerFactoryWrapper",
                "method_name": "<init>",
                "parameters": "(KeyManager)",
                "footprint": "io.netty.handler.ssl.KeyManagerFactoryWrapper.<init>(KeyManager)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine",
                "method_name": "<init>",
                "parameters": "(ReferenceCountedOpenSslContext, ByteBufAllocator, String, int, boolean, boolean)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine.<init>(ReferenceCountedOpenSslContext, ByteBufAllocator, String, int, boolean, boolean)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine",
                "method_name": "getEnabledCipherSuites",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine.getEnabledCipherSuites()"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine",
                "method_name": "setEnabledCipherSuites",
                "parameters": "(String[])",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine.setEnabledCipherSuites(String[])"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine",
                "method_name": "setEnabledProtocols",
                "parameters": "(String[])",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine.setEnabledProtocols(String[])"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "initPeerCerts",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.initPeerCerts()"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "initCerts",
                "parameters": "(byte[][], int)",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.initCerts(byte[][], int)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContextBuilder",
                "method_name": "forServer",
                "parameters": "(InputStream, InputStream)",
                "footprint": "io.netty.handler.ssl.SslContextBuilder.forServer(InputStream, InputStream)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContextBuilder",
                "method_name": "forServer",
                "parameters": "(InputStream, InputStream, String)",
                "footprint": "io.netty.handler.ssl.SslContextBuilder.forServer(InputStream, InputStream, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContextBuilder",
                "method_name": "trustManager",
                "parameters": "(InputStream)",
                "footprint": "io.netty.handler.ssl.SslContextBuilder.trustManager(InputStream)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContextBuilder",
                "method_name": "keyManager",
                "parameters": "(InputStream, InputStream)",
                "footprint": "io.netty.handler.ssl.SslContextBuilder.keyManager(InputStream, InputStream)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContextBuilder",
                "method_name": "keyManager",
                "parameters": "(InputStream, InputStream, String)",
                "footprint": "io.netty.handler.ssl.SslContextBuilder.keyManager(InputStream, InputStream, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContextBuilder",
                "method_name": "build",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.SslContextBuilder.build()"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslX509Certificate",
                "method_name": "<init>",
                "parameters": "(byte[])",
                "footprint": "io.netty.handler.ssl.OpenSslX509Certificate.<init>(byte[])"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslX509Certificate",
                "method_name": "unwrap",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.OpenSslX509Certificate.unwrap()"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "newServerContextInternal",
                "parameters": "(SslProvider, Provider, X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, ClientAuth, String[], boolean, boolean, String)",
                "footprint": "io.netty.handler.ssl.SslContext.newServerContextInternal(SslProvider, Provider, X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, ClientAuth, String[], boolean, boolean, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "newClientContextInternal",
                "parameters": "(SslProvider, Provider, X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, String[], long, long, boolean, String)",
                "footprint": "io.netty.handler.ssl.SslContext.newClientContextInternal(SslProvider, Provider, X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, String[], long, long, boolean, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "generateKeySpec",
                "parameters": "(char[], byte[])",
                "footprint": "io.netty.handler.ssl.SslContext.generateKeySpec(char[], byte[])"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "buildKeyStore",
                "parameters": "(X509Certificate[], PrivateKey, char[], String)",
                "footprint": "io.netty.handler.ssl.SslContext.buildKeyStore(X509Certificate[], PrivateKey, char[], String)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "toPrivateKey",
                "parameters": "(File, String)",
                "footprint": "io.netty.handler.ssl.SslContext.toPrivateKey(File, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "toPrivateKey",
                "parameters": "(InputStream, String)",
                "footprint": "io.netty.handler.ssl.SslContext.toPrivateKey(InputStream, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "buildTrustManagerFactory",
                "parameters": "(File, TrustManagerFactory)",
                "footprint": "io.netty.handler.ssl.SslContext.buildTrustManagerFactory(File, TrustManagerFactory)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "buildTrustManagerFactory",
                "parameters": "(File, TrustManagerFactory, String)",
                "footprint": "io.netty.handler.ssl.SslContext.buildTrustManagerFactory(File, TrustManagerFactory, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "toX509Certificates",
                "parameters": "(File)",
                "footprint": "io.netty.handler.ssl.SslContext.toX509Certificates(File)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "toX509Certificates",
                "parameters": "(InputStream)",
                "footprint": "io.netty.handler.ssl.SslContext.toX509Certificates(InputStream)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "buildTrustManagerFactory",
                "parameters": "(X509Certificate[], TrustManagerFactory, String)",
                "footprint": "io.netty.handler.ssl.SslContext.buildTrustManagerFactory(X509Certificate[], TrustManagerFactory, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "buildKeyManagerFactory",
                "parameters": "(X509Certificate[], PrivateKey, String, KeyManagerFactory, String)",
                "footprint": "io.netty.handler.ssl.SslContext.buildKeyManagerFactory(X509Certificate[], PrivateKey, String, KeyManagerFactory, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "buildKeyManagerFactory",
                "parameters": "(X509Certificate[], String, PrivateKey, String, KeyManagerFactory, String)",
                "footprint": "io.netty.handler.ssl.SslContext.buildKeyManagerFactory(X509Certificate[], String, PrivateKey, String, KeyManagerFactory, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "buildKeyManagerFactory",
                "parameters": "(X509Certificate[], String, PrivateKey, String, KeyManagerFactory)",
                "footprint": "io.netty.handler.ssl.SslContext.buildKeyManagerFactory(X509Certificate[], String, PrivateKey, String, KeyManagerFactory)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "buildKeyManagerFactory",
                "parameters": "(KeyStore, String, char[], KeyManagerFactory)",
                "footprint": "io.netty.handler.ssl.SslContext.buildKeyManagerFactory(KeyStore, String, char[], KeyManagerFactory)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslServerContext",
                "method_name": "<init>",
                "parameters": "(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, ClientAuth, String[], boolean, boolean, String)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslServerContext.<init>(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, ClientAuth, String[], boolean, boolean, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslServerContext",
                "method_name": "<init>",
                "parameters": "(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, ClientAuth, String[], boolean, boolean, String)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslServerContext.<init>(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, ClientAuth, String[], boolean, boolean, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslClientContext",
                "method_name": "<init>",
                "parameters": "(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, String[], long, long, boolean, String)",
                "footprint": "io.netty.handler.ssl.OpenSslClientContext.<init>(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, String[], long, long, boolean, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.JdkSslServerContext",
                "method_name": "newSSLContext",
                "parameters": "(Provider, X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, long, long, String)",
                "footprint": "io.netty.handler.ssl.JdkSslServerContext.newSSLContext(Provider, X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, long, long, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslJavaxX509Certificate",
                "method_name": "<init>",
                "parameters": "(byte[])",
                "footprint": "io.netty.handler.ssl.OpenSslJavaxX509Certificate.<init>(byte[])"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslContext",
                "method_name": "<init>",
                "parameters": "(Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean)",
                "footprint": "io.netty.handler.ssl.OpenSslContext.<init>(Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslContext",
                "method_name": "<init>",
                "parameters": "(Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean)",
                "footprint": "io.netty.handler.ssl.OpenSslContext.<init>(Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslClientContext",
                "method_name": "<init>",
                "parameters": "(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, String[], long, long, boolean, String)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslClientContext.<init>(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, String[], long, long, boolean, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.TrustManagerFactoryWrapper",
                "method_name": "<init>",
                "parameters": "(TrustManager)",
                "footprint": "io.netty.handler.ssl.TrustManagerFactoryWrapper.<init>(TrustManager)"
            },
            {
                "class_name": "io.netty.handler.ssl.JdkSslClientContext",
                "method_name": "newSSLContext",
                "parameters": "(Provider, X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, long, long, String)",
                "footprint": "io.netty.handler.ssl.JdkSslClientContext.newSSLContext(Provider, X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, long, long, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslServerContext",
                "method_name": "<init>",
                "parameters": "(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, ClientAuth, String[], boolean, boolean, String)",
                "footprint": "io.netty.handler.ssl.OpenSslServerContext.<init>(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, ClientAuth, String[], boolean, boolean, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslServerContext",
                "method_name": "<init>",
                "parameters": "(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, ClientAuth, String[], boolean, boolean, String)",
                "footprint": "io.netty.handler.ssl.OpenSslServerContext.<init>(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, ClientAuth, String[], boolean, boolean, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslContext",
                "method_name": "<init>",
                "parameters": "(Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean, boolean)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslContext.<init>(Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean, boolean)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslContext",
                "method_name": "<init>",
                "parameters": "(Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean, boolean)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslContext.<init>(Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean, boolean)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslContext",
                "method_name": "setPrivateKeyMethod",
                "parameters": "(OpenSslPrivateKeyMethod)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslContext.setPrivateKeyMethod(OpenSslPrivateKeyMethod)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslContext",
                "method_name": "certificates",
                "parameters": "(byte[][])",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslContext.certificates(byte[][])"
            },
            {
                "class_name": "io.netty.handler.ssl.util.SelfSignedCertificate",
                "method_name": "newSelfSignedCertificate",
                "parameters": "(String, PrivateKey, X509Certificate)",
                "footprint": "io.netty.handler.ssl.util.SelfSignedCertificate.newSelfSignedCertificate(String, PrivateKey, X509Certificate)"
            },
            {
                "class_name": "io.netty.channel.kqueue.Native",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "io.netty.channel.kqueue.Native.<clinit>()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 1,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.681594"
    },
    {
        "vulnerability": "CVE-2021-21295",
        "repository": "netty/netty",
        "symbols": [
            {
                "class_name": "io.netty.handler.codec.DefaultHeaders<K, V, T>",
                "method_name": "remove0",
                "parameters": "(HeaderEntry, HeaderEntry)",
                "footprint": "io.netty.handler.codec.DefaultHeaders<K, V, T>.remove0(HeaderEntry, HeaderEntry)"
            },
            {
                "class_name": "io.netty.channel.epoll.NativeDatagramPacketArray",
                "method_name": "addWritable",
                "parameters": "(ByteBuf, int, int)",
                "footprint": "io.netty.channel.epoll.NativeDatagramPacketArray.addWritable(ByteBuf, int, int)"
            },
            {
                "class_name": "io.netty.channel.epoll.NativeDatagramPacketArray",
                "method_name": "add0",
                "parameters": "(ByteBuf, int, int, InetSocketAddress)",
                "footprint": "io.netty.channel.epoll.NativeDatagramPacketArray.add0(ByteBuf, int, int, InetSocketAddress)"
            },
            {
                "class_name": "io.netty.channel.epoll.MyMessageProcessor",
                "method_name": "processMessage",
                "parameters": "(Object)",
                "footprint": "io.netty.channel.epoll.MyMessageProcessor.processMessage(Object)"
            },
            {
                "class_name": "io.netty.channel.epoll.NativeDatagramPacket",
                "method_name": "init",
                "parameters": "(long, int, InetSocketAddress)",
                "footprint": "io.netty.channel.epoll.NativeDatagramPacket.init(long, int, InetSocketAddress)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollSocketChannelConfig",
                "method_name": "getOptions",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.EpollSocketChannelConfig.getOptions()"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollSocketChannelConfig",
                "method_name": "getOption",
                "parameters": "(ChannelOption)",
                "footprint": "io.netty.channel.epoll.EpollSocketChannelConfig.getOption(ChannelOption)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollSocketChannelConfig",
                "method_name": "setOption",
                "parameters": "(ChannelOption, T)",
                "footprint": "io.netty.channel.epoll.EpollSocketChannelConfig.setOption(ChannelOption, T)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollSocketChannelConfig",
                "method_name": "setTcpFastOpenConnect",
                "parameters": "(boolean)",
                "footprint": "io.netty.channel.epoll.EpollSocketChannelConfig.setTcpFastOpenConnect(boolean)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollSocketChannelConfig",
                "method_name": "isTcpFastOpenConnect",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.EpollSocketChannelConfig.isTcpFastOpenConnect()"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDatagramChannel",
                "method_name": "doWrite",
                "parameters": "(ChannelOutboundBuffer)",
                "footprint": "io.netty.channel.epoll.EpollDatagramChannel.doWrite(ChannelOutboundBuffer)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDatagramChannel",
                "method_name": "doWriteMessage",
                "parameters": "(Object)",
                "footprint": "io.netty.channel.epoll.EpollDatagramChannel.doWriteMessage(Object)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDatagramChannel",
                "method_name": "filterOutboundMessage",
                "parameters": "(Object)",
                "footprint": "io.netty.channel.epoll.EpollDatagramChannel.filterOutboundMessage(Object)"
            },
            {
                "class_name": "io.netty.channel.epoll.AbstractEpollChannel",
                "method_name": "doConnect0",
                "parameters": "(SocketAddress)",
                "footprint": "io.netty.channel.epoll.AbstractEpollChannel.doConnect0(SocketAddress)"
            },
            {
                "class_name": "io.netty.channel.epoll.LinuxSocket",
                "method_name": "joinGroup",
                "parameters": "(InetAddress, NetworkInterface, InetAddress)",
                "footprint": "io.netty.channel.epoll.LinuxSocket.joinGroup(InetAddress, NetworkInterface, InetAddress)"
            },
            {
                "class_name": "io.netty.channel.epoll.LinuxSocket",
                "method_name": "leaveGroup",
                "parameters": "(InetAddress, NetworkInterface, InetAddress)",
                "footprint": "io.netty.channel.epoll.LinuxSocket.leaveGroup(InetAddress, NetworkInterface, InetAddress)"
            },
            {
                "class_name": "io.netty.channel.epoll.LinuxSocket",
                "method_name": "setTcpFastOpenConnect",
                "parameters": "(boolean)",
                "footprint": "io.netty.channel.epoll.LinuxSocket.setTcpFastOpenConnect(boolean)"
            },
            {
                "class_name": "io.netty.channel.epoll.LinuxSocket",
                "method_name": "isTcpFastOpenConnect",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.LinuxSocket.isTcpFastOpenConnect()"
            },
            {
                "class_name": "io.netty.channel.epoll.LinuxSocket",
                "method_name": "setTcpKeepIdle",
                "parameters": "(int)",
                "footprint": "io.netty.channel.epoll.LinuxSocket.setTcpKeepIdle(int)"
            },
            {
                "class_name": "io.netty.channel.epoll.LinuxSocket",
                "method_name": "isTcpFastOpenConnect",
                "parameters": "(int)",
                "footprint": "io.netty.channel.epoll.LinuxSocket.isTcpFastOpenConnect(int)"
            },
            {
                "class_name": "io.netty.channel.epoll.LinuxSocket",
                "method_name": "setTcpFastOpenConnect",
                "parameters": "(int, int)",
                "footprint": "io.netty.channel.epoll.LinuxSocket.setTcpFastOpenConnect(int, int)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoderBenchmark",
                "method_name": "testHighNumberChunks",
                "parameters": "(boolean, boolean)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoderBenchmark.testHighNumberChunks(boolean, boolean)"
            },
            {
                "class_name": "io.netty.resolver.dns.DnsNameResolverBuilder",
                "method_name": "build",
                "parameters": "()",
                "footprint": "io.netty.resolver.dns.DnsNameResolverBuilder.build()"
            },
            {
                "class_name": "io.netty.resolver.dns.DnsNameResolver",
                "method_name": "<init>",
                "parameters": "(EventLoop, ChannelFactory, ChannelFactory, DnsCache, DnsCnameCache, AuthoritativeDnsServerCache, DnsQueryLifecycleObserverFactory, long, ResolvedAddressTypes, boolean, int, boolean, int, boolean, HostsFileEntriesResolver, DnsServerAddressStreamProvider, String[], int, boolean, boolean)",
                "footprint": "io.netty.resolver.dns.DnsNameResolver.<init>(EventLoop, ChannelFactory, ChannelFactory, DnsCache, DnsCnameCache, AuthoritativeDnsServerCache, DnsQueryLifecycleObserverFactory, long, ResolvedAddressTypes, boolean, int, boolean, int, boolean, HostsFileEntriesResolver, DnsServerAddressStreamProvider, String[], int, boolean, boolean)"
            },
            {
                "class_name": "io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider",
                "method_name": "<init>",
                "parameters": "(File, File)",
                "footprint": "io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider.<init>(File, File)"
            },
            {
                "class_name": "io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider",
                "method_name": "<init>",
                "parameters": "(String, String)",
                "footprint": "io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider.<init>(String, String)"
            },
            {
                "class_name": "io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider",
                "method_name": "parseEtcResolverSearchDomains",
                "parameters": "(File)",
                "footprint": "io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider.parseEtcResolverSearchDomains(File)"
            },
            {
                "class_name": "io.netty.resolver.dns.DnsServerAddressStreamProviders",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "io.netty.resolver.dns.DnsServerAddressStreamProviders.<clinit>()"
            },
            {
                "class_name": "io.netty.channel.unix.Socket",
                "method_name": "sendTo",
                "parameters": "(ByteBuffer, int, int, InetAddress, int)",
                "footprint": "io.netty.channel.unix.Socket.sendTo(ByteBuffer, int, int, InetAddress, int)"
            },
            {
                "class_name": "io.netty.channel.unix.Socket",
                "method_name": "sendToAddress",
                "parameters": "(long, int, int, InetAddress, int)",
                "footprint": "io.netty.channel.unix.Socket.sendToAddress(long, int, int, InetAddress, int)"
            },
            {
                "class_name": "io.netty.channel.unix.Socket",
                "method_name": "sendToAddresses",
                "parameters": "(long, int, InetAddress, int)",
                "footprint": "io.netty.channel.unix.Socket.sendToAddresses(long, int, InetAddress, int)"
            },
            {
                "class_name": "io.netty.channel.unix.Socket",
                "method_name": "sendTo",
                "parameters": "(int, boolean, ByteBuffer, int, int, byte[], int, int)",
                "footprint": "io.netty.channel.unix.Socket.sendTo(int, boolean, ByteBuffer, int, int, byte[], int, int)"
            },
            {
                "class_name": "io.netty.channel.unix.Socket",
                "method_name": "sendToAddress",
                "parameters": "(int, boolean, long, int, int, byte[], int, int)",
                "footprint": "io.netty.channel.unix.Socket.sendToAddress(int, boolean, long, int, int, byte[], int, int)"
            },
            {
                "class_name": "io.netty.channel.unix.Socket",
                "method_name": "sendToAddresses",
                "parameters": "(int, boolean, long, int, byte[], int, int)",
                "footprint": "io.netty.channel.unix.Socket.sendToAddresses(int, boolean, long, int, byte[], int, int)"
            },
            {
                "class_name": "io.netty.channel.unix.Socket",
                "method_name": "sendFd",
                "parameters": "(int, int)",
                "footprint": "io.netty.channel.unix.Socket.sendFd(int, int)"
            },
            {
                "class_name": "io.netty.example.http.file.HttpStaticFileServerHandler",
                "method_name": "channelRead0",
                "parameters": "(ChannelHandlerContext, FullHttpRequest)",
                "footprint": "io.netty.example.http.file.HttpStaticFileServerHandler.channelRead0(ChannelHandlerContext, FullHttpRequest)"
            },
            {
                "class_name": "io.netty.example.http.file.HttpStaticFileServerHandler",
                "method_name": "sanitizeUri",
                "parameters": "(String)",
                "footprint": "io.netty.example.http.file.HttpStaticFileServerHandler.sanitizeUri(String)"
            },
            {
                "class_name": "io.netty.example.http.file.HttpStaticFileServerHandler",
                "method_name": "sendListing",
                "parameters": "(ChannelHandlerContext, File, String)",
                "footprint": "io.netty.example.http.file.HttpStaticFileServerHandler.sendListing(ChannelHandlerContext, File, String)"
            },
            {
                "class_name": "io.netty.example.http.file.HttpStaticFileServerHandler",
                "method_name": "sendRedirect",
                "parameters": "(ChannelHandlerContext, String)",
                "footprint": "io.netty.example.http.file.HttpStaticFileServerHandler.sendRedirect(ChannelHandlerContext, String)"
            },
            {
                "class_name": "io.netty.example.http.file.HttpStaticFileServerHandler",
                "method_name": "sendError",
                "parameters": "(ChannelHandlerContext, HttpResponseStatus)",
                "footprint": "io.netty.example.http.file.HttpStaticFileServerHandler.sendError(ChannelHandlerContext, HttpResponseStatus)"
            },
            {
                "class_name": "io.netty.example.http.file.HttpStaticFileServerHandler",
                "method_name": "sendNotModified",
                "parameters": "(ChannelHandlerContext)",
                "footprint": "io.netty.example.http.file.HttpStaticFileServerHandler.sendNotModified(ChannelHandlerContext)"
            },
            {
                "class_name": "io.netty.util.DefaultHandle<T>",
                "method_name": "recycle",
                "parameters": "(Object)",
                "footprint": "io.netty.util.DefaultHandle<T>.recycle(Object)"
            },
            {
                "class_name": "io.netty.util.WeakOrderQueue",
                "method_name": "reclaimAllSpaceAndUnlink",
                "parameters": "()",
                "footprint": "io.netty.util.WeakOrderQueue.reclaimAllSpaceAndUnlink()"
            },
            {
                "class_name": "io.netty.util.WeakOrderQueue",
                "method_name": "add",
                "parameters": "(DefaultHandle)",
                "footprint": "io.netty.util.WeakOrderQueue.add(DefaultHandle)"
            },
            {
                "class_name": "io.netty.util.Stack<T>",
                "method_name": "pushNow",
                "parameters": "(DefaultHandle)",
                "footprint": "io.netty.util.Stack<T>.pushNow(DefaultHandle)"
            },
            {
                "class_name": "io.netty.util.internal.ConstantTimeUtils",
                "method_name": "equalsConstantTime",
                "parameters": "(int, int)",
                "footprint": "io.netty.util.internal.ConstantTimeUtils.equalsConstantTime(int, int)"
            },
            {
                "class_name": "io.netty.util.internal.ConstantTimeUtils",
                "method_name": "equalsConstantTime",
                "parameters": "(long, long)",
                "footprint": "io.netty.util.internal.ConstantTimeUtils.equalsConstantTime(long, long)"
            },
            {
                "class_name": "io.netty.util.internal.NettyBlockHoundIntegration",
                "method_name": "applyTo",
                "parameters": "(BlockHound.Builder)",
                "footprint": "io.netty.util.internal.NettyBlockHoundIntegration.applyTo(BlockHound.Builder)"
            },
            {
                "class_name": "io.netty.util.concurrent.AbstractEventExecutor",
                "method_name": "lazyExecute",
                "parameters": "(Runnable)",
                "footprint": "io.netty.util.concurrent.AbstractEventExecutor.lazyExecute(Runnable)"
            },
            {
                "class_name": "io.netty.buffer.AbstractByteBuf",
                "method_name": "adjustMarkers",
                "parameters": "(int)",
                "footprint": "io.netty.buffer.AbstractByteBuf.adjustMarkers(int)"
            },
            {
                "class_name": "io.netty.buffer.PoolThreadCache",
                "method_name": "allocateNormal",
                "parameters": "(PoolArena, PooledByteBuf, int, int)",
                "footprint": "io.netty.buffer.PoolThreadCache.allocateNormal(PoolArena, PooledByteBuf, int, int)"
            },
            {
                "class_name": "io.netty.bootstrap.Bootstrap",
                "method_name": "init",
                "parameters": "(Channel)",
                "footprint": "io.netty.bootstrap.Bootstrap.init(Channel)"
            },
            {
                "class_name": "io.netty.channel.PendingWriteQueue",
                "method_name": "<init>",
                "parameters": "(ChannelHandlerContext)",
                "footprint": "io.netty.channel.PendingWriteQueue.<init>(ChannelHandlerContext)"
            },
            {
                "class_name": "io.netty.channel.PendingWriteQueue",
                "method_name": "isEmpty",
                "parameters": "()",
                "footprint": "io.netty.channel.PendingWriteQueue.isEmpty()"
            },
            {
                "class_name": "io.netty.channel.PendingWriteQueue",
                "method_name": "size",
                "parameters": "()",
                "footprint": "io.netty.channel.PendingWriteQueue.size()"
            },
            {
                "class_name": "io.netty.channel.PendingWriteQueue",
                "method_name": "bytes",
                "parameters": "()",
                "footprint": "io.netty.channel.PendingWriteQueue.bytes()"
            },
            {
                "class_name": "io.netty.channel.PendingWriteQueue",
                "method_name": "add",
                "parameters": "(Object, ChannelPromise)",
                "footprint": "io.netty.channel.PendingWriteQueue.add(Object, ChannelPromise)"
            },
            {
                "class_name": "io.netty.channel.PendingWriteQueue",
                "method_name": "removeAndWriteAll",
                "parameters": "()",
                "footprint": "io.netty.channel.PendingWriteQueue.removeAndWriteAll()"
            },
            {
                "class_name": "io.netty.channel.PendingWriteQueue",
                "method_name": "removeAndFailAll",
                "parameters": "(Throwable)",
                "footprint": "io.netty.channel.PendingWriteQueue.removeAndFailAll(Throwable)"
            },
            {
                "class_name": "io.netty.channel.PendingWriteQueue",
                "method_name": "removeAndFail",
                "parameters": "(Throwable)",
                "footprint": "io.netty.channel.PendingWriteQueue.removeAndFail(Throwable)"
            },
            {
                "class_name": "io.netty.channel.PendingWriteQueue",
                "method_name": "removeAndWrite",
                "parameters": "()",
                "footprint": "io.netty.channel.PendingWriteQueue.removeAndWrite()"
            },
            {
                "class_name": "io.netty.channel.PendingWriteQueue",
                "method_name": "remove",
                "parameters": "()",
                "footprint": "io.netty.channel.PendingWriteQueue.remove()"
            },
            {
                "class_name": "io.netty.channel.PendingWriteQueue",
                "method_name": "current",
                "parameters": "()",
                "footprint": "io.netty.channel.PendingWriteQueue.current()"
            },
            {
                "class_name": "io.netty.handler.codec.http2.Http2MultiplexHandler",
                "method_name": "exceptionCaught",
                "parameters": "(ChannelHandlerContext, Throwable)",
                "footprint": "io.netty.handler.codec.http2.Http2MultiplexHandler.exceptionCaught(ChannelHandlerContext, Throwable)"
            },
            {
                "class_name": "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder",
                "method_name": "<init>",
                "parameters": "(Http2Connection, Http2ConnectionEncoder, Http2FrameReader, Http2PromisedRequestVerifier, boolean, boolean)",
                "footprint": "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.<init>(Http2Connection, Http2ConnectionEncoder, Http2FrameReader, Http2PromisedRequestVerifier, boolean, boolean)"
            },
            {
                "class_name": "io.netty.handler.codec.http2.FrameReadListener",
                "method_name": "onDataRead",
                "parameters": "(ChannelHandlerContext, int, ByteBuf, int, boolean)",
                "footprint": "io.netty.handler.codec.http2.FrameReadListener.onDataRead(ChannelHandlerContext, int, ByteBuf, int, boolean)"
            },
            {
                "class_name": "io.netty.handler.codec.http2.FrameReadListener",
                "method_name": "onHeadersRead",
                "parameters": "(ChannelHandlerContext, int, Http2Headers, int, short, boolean, int, boolean)",
                "footprint": "io.netty.handler.codec.http2.FrameReadListener.onHeadersRead(ChannelHandlerContext, int, Http2Headers, int, short, boolean, int, boolean)"
            },
            {
                "class_name": "io.netty.handler.codec.http.HttpUtil",
                "method_name": "formatHostnameForHttp",
                "parameters": "(InetSocketAddress)",
                "footprint": "io.netty.handler.codec.http.HttpUtil.formatHostnameForHttp(InetSocketAddress)"
            },
            {
                "class_name": "io.netty.handler.codec.http.HttpObjectDecoder",
                "method_name": "readHeaders",
                "parameters": "(ByteBuf)",
                "footprint": "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf)"
            },
            {
                "class_name": "io.netty.handler.codec.http.HttpObjectDecoder",
                "method_name": "findNonWhitespace",
                "parameters": "(AppendableCharSequence, int, boolean)",
                "footprint": "io.netty.handler.codec.http.HttpObjectDecoder.findNonWhitespace(AppendableCharSequence, int, boolean)"
            },
            {
                "class_name": "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder",
                "method_name": "encode",
                "parameters": "(ChannelHandlerContext, WebSocketFrame, List)",
                "footprint": "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder.encode(ChannelHandlerContext, WebSocketFrame, List)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "decodeMultipart",
                "parameters": "(MultiPartStatus)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.decodeMultipart(MultiPartStatus)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "findMultipartDelimiter",
                "parameters": "(String, MultiPartStatus, MultiPartStatus)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.findMultipartDelimiter(String, MultiPartStatus, MultiPartStatus)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "findMultipartDisposition",
                "parameters": "()",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.findMultipartDisposition()"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "getFileUpload",
                "parameters": "(String)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.getFileUpload(String)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "readLineStandard",
                "parameters": "(ByteBuf, Charset)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.readLineStandard(ByteBuf, Charset)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "readLine",
                "parameters": "(ByteBuf, Charset)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.readLine(ByteBuf, Charset)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "readDelimiterStandard",
                "parameters": "(ByteBuf, String)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.readDelimiterStandard(ByteBuf, String)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "readDelimiter",
                "parameters": "(ByteBuf, String)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.readDelimiter(ByteBuf, String)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "loadDataMultipartStandard",
                "parameters": "(ByteBuf, String, HttpData)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.loadDataMultipartStandard(ByteBuf, String, HttpData)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "loadDataMultipart",
                "parameters": "(ByteBuf, String, HttpData)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.loadDataMultipart(ByteBuf, String, HttpData)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder",
                "method_name": "splitMultipartHeaderValues",
                "parameters": "(String)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.splitMultipartHeaderValues(String)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData",
                "method_name": "addContent",
                "parameters": "(ByteBuf, boolean)",
                "footprint": "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData.addContent(ByteBuf, boolean)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder",
                "method_name": "offer",
                "parameters": "(HttpContent)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder.offer(HttpContent)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder",
                "method_name": "encodeNextChunkUrlEncoded",
                "parameters": "(int)",
                "footprint": "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder.encodeNextChunkUrlEncoded(int)"
            },
            {
                "class_name": "io.netty.handler.codec.http.multipart.MixedAttribute",
                "method_name": "setValue",
                "parameters": "(String)",
                "footprint": "io.netty.handler.codec.http.multipart.MixedAttribute.setValue(String)"
            },
            {
                "class_name": "io.netty.handler.codec.mqtt.MqttDecoder",
                "method_name": "decodeConnectionPayload",
                "parameters": "(ByteBuf, MqttConnectVariableHeader)",
                "footprint": "io.netty.handler.codec.mqtt.MqttDecoder.decodeConnectionPayload(ByteBuf, MqttConnectVariableHeader)"
            },
            {
                "class_name": "io.netty.handler.stream.ChunkedWriteHandler",
                "method_name": "doFlush",
                "parameters": "(ChannelHandlerContext)",
                "footprint": "io.netty.handler.stream.ChunkedWriteHandler.doFlush(ChannelHandlerContext)"
            },
            {
                "class_name": "io.netty.handler.timeout.WriteTimeoutHandler",
                "method_name": "handlerRemoved",
                "parameters": "(ChannelHandlerContext)",
                "footprint": "io.netty.handler.timeout.WriteTimeoutHandler.handlerRemoved(ChannelHandlerContext)"
            },
            {
                "class_name": "io.netty.handler.timeout.WriteTimeoutHandler",
                "method_name": "addWriteTimeoutTask",
                "parameters": "(WriteTimeoutTask)",
                "footprint": "io.netty.handler.timeout.WriteTimeoutHandler.addWriteTimeoutTask(WriteTimeoutTask)"
            },
            {
                "class_name": "io.netty.handler.timeout.WriteTimeoutHandler",
                "method_name": "removeWriteTimeoutTask",
                "parameters": "(WriteTimeoutTask)",
                "footprint": "io.netty.handler.timeout.WriteTimeoutHandler.removeWriteTimeoutTask(WriteTimeoutTask)"
            },
            {
                "class_name": "io.netty.handler.timeout.WriteTimeoutTask",
                "method_name": "operationComplete",
                "parameters": "(ChannelFuture)",
                "footprint": "io.netty.handler.timeout.WriteTimeoutTask.operationComplete(ChannelFuture)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslServerSessionContext",
                "method_name": "<init>",
                "parameters": "(ReferenceCountedOpenSslContext, OpenSslKeyMaterialProvider)",
                "footprint": "io.netty.handler.ssl.OpenSslServerSessionContext.<init>(ReferenceCountedOpenSslContext, OpenSslKeyMaterialProvider)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslServerSessionContext",
                "method_name": "setSessionTimeout",
                "parameters": "(int)",
                "footprint": "io.netty.handler.ssl.OpenSslServerSessionContext.setSessionTimeout(int)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslServerSessionContext",
                "method_name": "getSessionTimeout",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.OpenSslServerSessionContext.getSessionTimeout()"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslServerSessionContext",
                "method_name": "setSessionCacheSize",
                "parameters": "(int)",
                "footprint": "io.netty.handler.ssl.OpenSslServerSessionContext.setSessionCacheSize(int)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslServerSessionContext",
                "method_name": "getSessionCacheSize",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.OpenSslServerSessionContext.getSessionCacheSize()"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslServerSessionContext",
                "method_name": "setSessionCacheEnabled",
                "parameters": "(boolean)",
                "footprint": "io.netty.handler.ssl.OpenSslServerSessionContext.setSessionCacheEnabled(boolean)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslServerSessionContext",
                "method_name": "isSessionCacheEnabled",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.OpenSslServerSessionContext.isSessionCacheEnabled()"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine",
                "method_name": "<init>",
                "parameters": "(ReferenceCountedOpenSslContext, ByteBufAllocator, String, int, boolean, boolean)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine.<init>(ReferenceCountedOpenSslContext, ByteBufAllocator, String, int, boolean, boolean)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine",
                "method_name": "setKeyMaterial",
                "parameters": "(OpenSslKeyMaterial)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine.setKeyMaterial(OpenSslKeyMaterial)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine",
                "method_name": "handshake",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslEngine.handshake()"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "getId",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.getId()"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "getSessionContext",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.getSessionContext()"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "getCreationTime",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.getCreationTime()"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "invalidate",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.invalidate()"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "isValid",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.isValid()"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "handshakeFinished",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.handshakeFinished()"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "initPeerCerts",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.initPeerCerts()"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "initCerts",
                "parameters": "(byte[][], int)",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.initCerts(byte[][], int)"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "selectApplicationProtocol",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.selectApplicationProtocol()"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "selectApplicationProtocol",
                "parameters": "(List, ApplicationProtocolConfig.SelectedListenerFailureBehavior, String)",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.selectApplicationProtocol(List, ApplicationProtocolConfig.SelectedListenerFailureBehavior, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "getPeerCertificates",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.getPeerCertificates()"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "getLocalCertificates",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.getLocalCertificates()"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "getLocalPrincipal",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.getLocalPrincipal()"
            },
            {
                "class_name": "io.netty.handler.ssl.DefaultOpenSslSession",
                "method_name": "tryExpandApplicationBufferSize",
                "parameters": "(int)",
                "footprint": "io.netty.handler.ssl.DefaultOpenSslSession.tryExpandApplicationBufferSize(int)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslSessionContext",
                "method_name": "<init>",
                "parameters": "(ReferenceCountedOpenSslContext, OpenSslKeyMaterialProvider)",
                "footprint": "io.netty.handler.ssl.OpenSslSessionContext.<init>(ReferenceCountedOpenSslContext, OpenSslKeyMaterialProvider)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslSessionContext",
                "method_name": "getSession",
                "parameters": "(byte[])",
                "footprint": "io.netty.handler.ssl.OpenSslSessionContext.getSession(byte[])"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslSessionContext",
                "method_name": "getIds",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.OpenSslSessionContext.getIds()"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslSessionContext",
                "method_name": "setSessionCacheEnabled",
                "parameters": "(boolean)",
                "footprint": "io.netty.handler.ssl.OpenSslSessionContext.setSessionCacheEnabled(boolean)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslSessionContext",
                "method_name": "isSessionCacheEnabled",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.OpenSslSessionContext.isSessionCacheEnabled()"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslSessionContext",
                "method_name": "destroy",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.OpenSslSessionContext.destroy()"
            },
            {
                "class_name": "io.netty.handler.ssl.EmptyEnumeration",
                "method_name": "hasMoreElements",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.EmptyEnumeration.hasMoreElements()"
            },
            {
                "class_name": "io.netty.handler.ssl.EmptyEnumeration",
                "method_name": "nextElement",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.EmptyEnumeration.nextElement()"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "sessionCacheSize",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.SslContext.sessionCacheSize()"
            },
            {
                "class_name": "io.netty.handler.ssl.SslContext",
                "method_name": "sessionTimeout",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.SslContext.sessionTimeout()"
            },
            {
                "class_name": "io.netty.handler.ssl.ExtendedOpenSslSession",
                "method_name": "handshakeFinished",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.ExtendedOpenSslSession.handshakeFinished()"
            },
            {
                "class_name": "io.netty.handler.ssl.ExtendedOpenSslSession",
                "method_name": "getSessionContext",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.ExtendedOpenSslSession.getSessionContext()"
            },
            {
                "class_name": "io.netty.handler.ssl.ExtendedOpenSslSession",
                "method_name": "putValue",
                "parameters": "(String, Object)",
                "footprint": "io.netty.handler.ssl.ExtendedOpenSslSession.putValue(String, Object)"
            },
            {
                "class_name": "io.netty.handler.ssl.ExtendedOpenSslSession",
                "method_name": "getValue",
                "parameters": "(String)",
                "footprint": "io.netty.handler.ssl.ExtendedOpenSslSession.getValue(String)"
            },
            {
                "class_name": "io.netty.handler.ssl.ExtendedOpenSslSession",
                "method_name": "getApplicationBufferSize",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.ExtendedOpenSslSession.getApplicationBufferSize()"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslServerContext",
                "method_name": "<init>",
                "parameters": "(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, ClientAuth, String[], boolean, boolean, String, Map.Entry)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslServerContext.<init>(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, ClientAuth, String[], boolean, boolean, String, Map.Entry)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslServerContext",
                "method_name": "<init>",
                "parameters": "(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, ClientAuth, String[], boolean, boolean, String, Map.Entry)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslServerContext.<init>(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, ClientAuth, String[], boolean, boolean, String, Map.Entry)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslServerContext",
                "method_name": "newSessionContext",
                "parameters": "(ReferenceCountedOpenSslContext, long, OpenSslEngineMap, X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, String)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslServerContext.newSessionContext(ReferenceCountedOpenSslContext, long, OpenSslEngineMap, X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslClientContext",
                "method_name": "<init>",
                "parameters": "(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, String[], long, long, boolean, String, Map.Entry)",
                "footprint": "io.netty.handler.ssl.OpenSslClientContext.<init>(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, String[], long, long, boolean, String, Map.Entry)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslSession",
                "method_name": "handshakeFinished",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.OpenSslSession.handshakeFinished()"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslSession",
                "method_name": "tryExpandApplicationBufferSize",
                "parameters": "(int)",
                "footprint": "io.netty.handler.ssl.OpenSslSession.tryExpandApplicationBufferSize(int)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslContext",
                "method_name": "<init>",
                "parameters": "(Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean, Map.Entry)",
                "footprint": "io.netty.handler.ssl.OpenSslContext.<init>(Iterable, CipherSuiteFilter, ApplicationProtocolConfig, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean, Map.Entry)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslContext",
                "method_name": "<init>",
                "parameters": "(Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean, Map.Entry)",
                "footprint": "io.netty.handler.ssl.OpenSslContext.<init>(Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean, Map.Entry)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslClientContext",
                "method_name": "<init>",
                "parameters": "(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, String[], long, long, boolean, String, Map.Entry)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslClientContext.<init>(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig, String[], long, long, boolean, String, Map.Entry)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslClientContext",
                "method_name": "newSessionContext",
                "parameters": "(ReferenceCountedOpenSslContext, long, OpenSslEngineMap, X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, String)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslClientContext.newSessionContext(ReferenceCountedOpenSslContext, long, OpenSslEngineMap, X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, String)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslClientSessionContext",
                "method_name": "<init>",
                "parameters": "(ReferenceCountedOpenSslContext, OpenSslKeyMaterialProvider)",
                "footprint": "io.netty.handler.ssl.OpenSslClientSessionContext.<init>(ReferenceCountedOpenSslContext, OpenSslKeyMaterialProvider)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslClientSessionContext",
                "method_name": "setSessionTimeout",
                "parameters": "(int)",
                "footprint": "io.netty.handler.ssl.OpenSslClientSessionContext.setSessionTimeout(int)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslClientSessionContext",
                "method_name": "getSessionTimeout",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.OpenSslClientSessionContext.getSessionTimeout()"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslClientSessionContext",
                "method_name": "setSessionCacheSize",
                "parameters": "(int)",
                "footprint": "io.netty.handler.ssl.OpenSslClientSessionContext.setSessionCacheSize(int)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslClientSessionContext",
                "method_name": "getSessionCacheSize",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.OpenSslClientSessionContext.getSessionCacheSize()"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslClientSessionContext",
                "method_name": "setSessionCacheEnabled",
                "parameters": "(boolean)",
                "footprint": "io.netty.handler.ssl.OpenSslClientSessionContext.setSessionCacheEnabled(boolean)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslClientSessionContext",
                "method_name": "isSessionCacheEnabled",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.OpenSslClientSessionContext.isSessionCacheEnabled()"
            },
            {
                "class_name": "io.netty.handler.ssl.JdkSslContext",
                "method_name": "sessionCacheSize",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.JdkSslContext.sessionCacheSize()"
            },
            {
                "class_name": "io.netty.handler.ssl.JdkSslContext",
                "method_name": "sessionTimeout",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.JdkSslContext.sessionTimeout()"
            },
            {
                "class_name": "io.netty.handler.ssl.JdkSslContext",
                "method_name": "newEngine",
                "parameters": "(ByteBufAllocator)",
                "footprint": "io.netty.handler.ssl.JdkSslContext.newEngine(ByteBufAllocator)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslHandler",
                "method_name": "flush",
                "parameters": "(ChannelHandlerContext)",
                "footprint": "io.netty.handler.ssl.SslHandler.flush(ChannelHandlerContext)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslHandler",
                "method_name": "handlerAdded",
                "parameters": "(ChannelHandlerContext)",
                "footprint": "io.netty.handler.ssl.SslHandler.handlerAdded(ChannelHandlerContext)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslHandler",
                "method_name": "startHandshakeProcessing",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.SslHandler.startHandshakeProcessing()"
            },
            {
                "class_name": "io.netty.handler.ssl.SslHandler",
                "method_name": "renegotiateOnEventLoop",
                "parameters": "(Promise)",
                "footprint": "io.netty.handler.ssl.SslHandler.renegotiateOnEventLoop(Promise)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslHandler",
                "method_name": "handshake",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.SslHandler.handshake()"
            },
            {
                "class_name": "io.netty.handler.ssl.SslHandler",
                "method_name": "channelActive",
                "parameters": "(ChannelHandlerContext)",
                "footprint": "io.netty.handler.ssl.SslHandler.channelActive(ChannelHandlerContext)"
            },
            {
                "class_name": "io.netty.handler.ssl.OpenSslServerContext",
                "method_name": "<init>",
                "parameters": "(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, ClientAuth, String[], boolean, boolean, String, Map.Entry)",
                "footprint": "io.netty.handler.ssl.OpenSslServerContext.<init>(X509Certificate[], TrustManagerFactory, X509Certificate[], PrivateKey, String, KeyManagerFactory, Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, ClientAuth, String[], boolean, boolean, String, Map.Entry)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslContext",
                "method_name": "<init>",
                "parameters": "(Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean, boolean, Map.Entry)",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslContext.<init>(Iterable, CipherSuiteFilter, OpenSslApplicationProtocolNegotiator, long, long, int, Certificate[], ClientAuth, String[], boolean, boolean, boolean, Map.Entry)"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslContext",
                "method_name": "sessionCacheSize",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslContext.sessionCacheSize()"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslContext",
                "method_name": "sessionTimeout",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslContext.sessionTimeout()"
            },
            {
                "class_name": "io.netty.handler.ssl.ReferenceCountedOpenSslContext",
                "method_name": "applicationProtocolNegotiator",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.ReferenceCountedOpenSslContext.applicationProtocolNegotiator()"
            },
            {
                "class_name": "io.netty.handler.codec.xml.XmlEntityReference",
                "method_name": "equals",
                "parameters": "(Object)",
                "footprint": "io.netty.handler.codec.xml.XmlEntityReference.equals(Object)"
            },
            {
                "class_name": "io.netty.handler.codec.xml.XmlElementStart",
                "method_name": "equals",
                "parameters": "(Object)",
                "footprint": "io.netty.handler.codec.xml.XmlElementStart.equals(Object)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 0,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.683834"
    },
    {
        "vulnerability": "CVE-2021-21409",
        "repository": "netty/netty",
        "symbols": [
            {
                "class_name": "io.netty.channel.epoll.NativeDatagramPacketArray",
                "method_name": "add",
                "parameters": "(ChannelOutboundBuffer, boolean)",
                "footprint": "io.netty.channel.epoll.NativeDatagramPacketArray.add(ChannelOutboundBuffer, boolean)"
            },
            {
                "class_name": "io.netty.channel.epoll.MyMessageProcessor",
                "method_name": "processMessage",
                "parameters": "(Object)",
                "footprint": "io.netty.channel.epoll.MyMessageProcessor.processMessage(Object)"
            },
            {
                "class_name": "io.netty.channel.epoll.NativeDatagramPacket",
                "method_name": "newDatagramPacket",
                "parameters": "(ByteBuf, InetSocketAddress)",
                "footprint": "io.netty.channel.epoll.NativeDatagramPacket.newDatagramPacket(ByteBuf, InetSocketAddress)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollServerSocketChannel",
                "method_name": "doBind",
                "parameters": "(SocketAddress)",
                "footprint": "io.netty.channel.epoll.EpollServerSocketChannel.doBind(SocketAddress)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDatagramChannelConfig",
                "method_name": "getOptions",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.EpollDatagramChannelConfig.getOptions()"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDatagramChannelConfig",
                "method_name": "getOption",
                "parameters": "(ChannelOption)",
                "footprint": "io.netty.channel.epoll.EpollDatagramChannelConfig.getOption(ChannelOption)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDatagramChannelConfig",
                "method_name": "setOption",
                "parameters": "(ChannelOption, T)",
                "footprint": "io.netty.channel.epoll.EpollDatagramChannelConfig.setOption(ChannelOption, T)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDatagramChannelConfig",
                "method_name": "getMaxDatagramPayloadSize",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.EpollDatagramChannelConfig.getMaxDatagramPayloadSize()"
            },
            {
                "class_name": "io.netty.channel.epoll.SegmentedDatagramPacket",
                "method_name": "<init>",
                "parameters": "(ByteBuf, int, InetSocketAddress)",
                "footprint": "io.netty.channel.epoll.SegmentedDatagramPacket.<init>(ByteBuf, int, InetSocketAddress)"
            },
            {
                "class_name": "io.netty.channel.epoll.SegmentedDatagramPacket",
                "method_name": "<init>",
                "parameters": "(ByteBuf, int, InetSocketAddress, InetSocketAddress)",
                "footprint": "io.netty.channel.epoll.SegmentedDatagramPacket.<init>(ByteBuf, int, InetSocketAddress, InetSocketAddress)"
            },
            {
                "class_name": "io.netty.channel.epoll.SegmentedDatagramPacket",
                "method_name": "segmentSize",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.SegmentedDatagramPacket.segmentSize()"
            },
            {
                "class_name": "io.netty.channel.epoll.SegmentedDatagramPacket",
                "method_name": "copy",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.SegmentedDatagramPacket.copy()"
            },
            {
                "class_name": "io.netty.channel.epoll.SegmentedDatagramPacket",
                "method_name": "duplicate",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.SegmentedDatagramPacket.duplicate()"
            },
            {
                "class_name": "io.netty.channel.epoll.SegmentedDatagramPacket",
                "method_name": "retainedDuplicate",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.SegmentedDatagramPacket.retainedDuplicate()"
            },
            {
                "class_name": "io.netty.channel.epoll.SegmentedDatagramPacket",
                "method_name": "replace",
                "parameters": "(ByteBuf)",
                "footprint": "io.netty.channel.epoll.SegmentedDatagramPacket.replace(ByteBuf)"
            },
            {
                "class_name": "io.netty.channel.epoll.SegmentedDatagramPacket",
                "method_name": "checkByteBuf",
                "parameters": "(ByteBuf)",
                "footprint": "io.netty.channel.epoll.SegmentedDatagramPacket.checkByteBuf(ByteBuf)"
            },
            {
                "class_name": "io.netty.channel.epoll.SegmentedDatagramPacket",
                "method_name": "checkIsSupported",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.SegmentedDatagramPacket.checkIsSupported()"
            },
            {
                "class_name": "io.netty.channel.epoll.NativeStaticallyReferencedJniMethods",
                "method_name": "isSupportingTcpFastopen",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.NativeStaticallyReferencedJniMethods.isSupportingTcpFastopen()"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDatagramChannel",
                "method_name": "doWrite",
                "parameters": "(ChannelOutboundBuffer)",
                "footprint": "io.netty.channel.epoll.EpollDatagramChannel.doWrite(ChannelOutboundBuffer)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDatagramChannel",
                "method_name": "filterOutboundMessage",
                "parameters": "(Object)",
                "footprint": "io.netty.channel.epoll.EpollDatagramChannel.filterOutboundMessage(Object)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDatagramChannelUnsafe",
                "method_name": "epollInReady",
                "parameters": "()",
                "footprint": "io.netty.channel.epoll.EpollDatagramChannelUnsafe.epollInReady()"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDatagramChannel",
                "method_name": "scatteringRead",
                "parameters": "(EpollRecvByteAllocatorHandle, ByteBuf, int, int)",
                "footprint": "io.netty.channel.epoll.EpollDatagramChannel.scatteringRead(EpollRecvByteAllocatorHandle, ByteBuf, int, int)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollDatagramChannel",
                "method_name": "read",
                "parameters": "(EpollRecvByteAllocatorHandle, ByteBuf, int)",
                "footprint": "io.netty.channel.epoll.EpollDatagramChannel.read(EpollRecvByteAllocatorHandle, ByteBuf, int)"
            },
            {
                "class_name": "io.netty.channel.epoll.EpollSocketChannel",
                "method_name": "doConnect0",
                "parameters": "(SocketAddress)",
                "footprint": "io.netty.channel.epoll.EpollSocketChannel.doConnect0(SocketAddress)"
            },
            {
                "class_name": "io.netty.channel.epoll.LinuxSocket",
                "method_name": "setTimeToLive",
                "parameters": "(int, int)",
                "footprint": "io.netty.channel.epoll.LinuxSocket.setTimeToLive(int, int)"
            },
            {
                "class_name": "io.netty.channel.unix.Errors",
                "method_name": "throwConnectException",
                "parameters": "(String, int)",
                "footprint": "io.netty.channel.unix.Errors.throwConnectException(String, int)"
            },
            {
                "class_name": "io.netty.channel.unix.Socket",
                "method_name": "connect",
                "parameters": "(SocketAddress)",
                "footprint": "io.netty.channel.unix.Socket.connect(SocketAddress)"
            },
            {
                "class_name": "io.netty.channel.unix.Socket",
                "method_name": "finishConnect",
                "parameters": "()",
                "footprint": "io.netty.channel.unix.Socket.finishConnect()"
            },
            {
                "class_name": "io.netty.channel.unix.Socket",
                "method_name": "disconnect",
                "parameters": "()",
                "footprint": "io.netty.channel.unix.Socket.disconnect()"
            },
            {
                "class_name": "io.netty.util.internal.PlatformDependent0",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "io.netty.util.internal.PlatformDependent0.<clinit>()"
            },
            {
                "class_name": "io.netty.util.concurrent.DefaultThreadFactory",
                "method_name": "<init>",
                "parameters": "(String, boolean, int)",
                "footprint": "io.netty.util.concurrent.DefaultThreadFactory.<init>(String, boolean, int)"
            },
            {
                "class_name": "io.netty.util.concurrent.PromiseTask<V>",
                "method_name": "runTask",
                "parameters": "()",
                "footprint": "io.netty.util.concurrent.PromiseTask<V>.runTask()"
            },
            {
                "class_name": "io.netty.util.concurrent.UnorderedThreadPoolEventExecutor",
                "method_name": "decorateTask",
                "parameters": "(Runnable, RunnableScheduledFuture)",
                "footprint": "io.netty.util.concurrent.UnorderedThreadPoolEventExecutor.decorateTask(Runnable, RunnableScheduledFuture)"
            },
            {
                "class_name": "io.netty.util.concurrent.UnorderedThreadPoolEventExecutor",
                "method_name": "decorateTask",
                "parameters": "(Callable, RunnableScheduledFuture)",
                "footprint": "io.netty.util.concurrent.UnorderedThreadPoolEventExecutor.decorateTask(Callable, RunnableScheduledFuture)"
            },
            {
                "class_name": "io.netty.util.concurrent.RunnableScheduledFutureTask<V>",
                "method_name": "<init>",
                "parameters": "(EventExecutor, RunnableScheduledFuture)",
                "footprint": "io.netty.util.concurrent.RunnableScheduledFutureTask<V>.<init>(EventExecutor, RunnableScheduledFuture)"
            },
            {
                "class_name": "io.netty.buffer.CompositeByteBuf",
                "method_name": "findIt",
                "parameters": "(int)",
                "footprint": "io.netty.buffer.CompositeByteBuf.findIt(int)"
            },
            {
                "class_name": "io.netty.buffer.PoolArena<T>",
                "method_name": "<init>",
                "parameters": "(PooledByteBufAllocator, int, int, int, int)",
                "footprint": "io.netty.buffer.PoolArena<T>.<init>(PooledByteBufAllocator, int, int, int, int)"
            },
            {
                "class_name": "io.netty.buffer.PoolArena<T>",
                "method_name": "tcacheAllocateSmall",
                "parameters": "(PoolThreadCache, PooledByteBuf, int, int)",
                "footprint": "io.netty.buffer.PoolArena<T>.tcacheAllocateSmall(PoolThreadCache, PooledByteBuf, int, int)"
            },
            {
                "class_name": "io.netty.buffer.PoolArena<T>",
                "method_name": "sizeClass",
                "parameters": "(long)",
                "footprint": "io.netty.buffer.PoolArena<T>.sizeClass(long)"
            },
            {
                "class_name": "io.netty.buffer.HeapArena",
                "method_name": "newChunk",
                "parameters": "(int, int, int, int)",
                "footprint": "io.netty.buffer.HeapArena.newChunk(int, int, int, int)"
            },
            {
                "class_name": "io.netty.buffer.HeapArena",
                "method_name": "newUnpooledChunk",
                "parameters": "(int)",
                "footprint": "io.netty.buffer.HeapArena.newUnpooledChunk(int)"
            },
            {
                "class_name": "io.netty.buffer.DirectArena",
                "method_name": "offsetCacheLine",
                "parameters": "(ByteBuffer)",
                "footprint": "io.netty.buffer.DirectArena.offsetCacheLine(ByteBuffer)"
            },
            {
                "class_name": "io.netty.buffer.DirectArena",
                "method_name": "newChunk",
                "parameters": "(int, int, int, int)",
                "footprint": "io.netty.buffer.DirectArena.newChunk(int, int, int, int)"
            },
            {
                "class_name": "io.netty.buffer.DirectArena",
                "method_name": "newUnpooledChunk",
                "parameters": "(int)",
                "footprint": "io.netty.buffer.DirectArena.newUnpooledChunk(int)"
            },
            {
                "class_name": "io.netty.buffer.DirectArena",
                "method_name": "destroyChunk",
                "parameters": "(PoolChunk)",
                "footprint": "io.netty.buffer.DirectArena.destroyChunk(PoolChunk)"
            },
            {
                "class_name": "io.netty.buffer.PoolChunk<T>",
                "method_name": "<init>",
                "parameters": "(PoolArena, T, int, int, int, int, int)",
                "footprint": "io.netty.buffer.PoolChunk<T>.<init>(PoolArena, T, int, int, int, int, int)"
            },
            {
                "class_name": "io.netty.buffer.PoolChunk<T>",
                "method_name": "<init>",
                "parameters": "(PoolArena, T, int, int)",
                "footprint": "io.netty.buffer.PoolChunk<T>.<init>(PoolArena, T, int, int)"
            },
            {
                "class_name": "io.netty.buffer.PoolChunk<T>",
                "method_name": "initBufWithSubpage",
                "parameters": "(PooledByteBuf, ByteBuffer, long, int, PoolThreadCache)",
                "footprint": "io.netty.buffer.PoolChunk<T>.initBufWithSubpage(PooledByteBuf, ByteBuffer, long, int, PoolThreadCache)"
            },
            {
                "class_name": "io.netty.buffer.PooledByteBuf<T>",
                "method_name": "initUnpooled",
                "parameters": "(PoolChunk, int)",
                "footprint": "io.netty.buffer.PooledByteBuf<T>.initUnpooled(PoolChunk, int)"
            },
            {
                "class_name": "io.netty.buffer.PooledByteBufAllocator",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "io.netty.buffer.PooledByteBufAllocator.<clinit>()"
            },
            {
                "class_name": "io.netty.buffer.PooledByteBufAllocator",
                "method_name": "<init>",
                "parameters": "(boolean, int, int, int, int, int, int, boolean, int)",
                "footprint": "io.netty.buffer.PooledByteBufAllocator.<init>(boolean, int, int, int, int, int, int, boolean, int)"
            },
            {
                "class_name": "io.netty.buffer.PooledByteBufAllocator",
                "method_name": "validateAndCalculatePageShifts",
                "parameters": "(int)",
                "footprint": "io.netty.buffer.PooledByteBufAllocator.validateAndCalculatePageShifts(int)"
            },
            {
                "class_name": "io.netty.channel.DefaultChannelConfig",
                "method_name": "getOptions",
                "parameters": "()",
                "footprint": "io.netty.channel.DefaultChannelConfig.getOptions()"
            },
            {
                "class_name": "io.netty.channel.DefaultChannelConfig",
                "method_name": "getOption",
                "parameters": "(ChannelOption)",
                "footprint": "io.netty.channel.DefaultChannelConfig.getOption(ChannelOption)"
            },
            {
                "class_name": "io.netty.channel.DefaultChannelConfig",
                "method_name": "setOption",
                "parameters": "(ChannelOption, T)",
                "footprint": "io.netty.channel.DefaultChannelConfig.setOption(ChannelOption, T)"
            },
            {
                "class_name": "io.netty.channel.socket.DefaultDatagramChannelConfig",
                "method_name": "setMessageSizeEstimator",
                "parameters": "(MessageSizeEstimator)",
                "footprint": "io.netty.channel.socket.DefaultDatagramChannelConfig.setMessageSizeEstimator(MessageSizeEstimator)"
            },
            {
                "class_name": "io.netty.channel.socket.nio.NioDatagramChannel",
                "method_name": "closeOnReadError",
                "parameters": "(Throwable)",
                "footprint": "io.netty.channel.socket.nio.NioDatagramChannel.closeOnReadError(Throwable)"
            },
            {
                "class_name": "io.netty.channel.nio.NioMessageUnsafe",
                "method_name": "read",
                "parameters": "()",
                "footprint": "io.netty.channel.nio.NioMessageUnsafe.read()"
            },
            {
                "class_name": "io.netty.channel.nio.AbstractNioMessageChannel",
                "method_name": "doWrite",
                "parameters": "(ChannelOutboundBuffer)",
                "footprint": "io.netty.channel.nio.AbstractNioMessageChannel.doWrite(ChannelOutboundBuffer)"
            },
            {
                "class_name": "io.netty.handler.codec.http2.HttpConversionUtil",
                "method_name": "toFullHttpRequest",
                "parameters": "(int, Http2Headers, ByteBuf, boolean)",
                "footprint": "io.netty.handler.codec.http2.HttpConversionUtil.toFullHttpRequest(int, Http2Headers, ByteBuf, boolean)"
            },
            {
                "class_name": "io.netty.handler.codec.http2.HttpConversionUtil",
                "method_name": "toHttpRequest",
                "parameters": "(int, Http2Headers, boolean)",
                "footprint": "io.netty.handler.codec.http2.HttpConversionUtil.toHttpRequest(int, Http2Headers, boolean)"
            },
            {
                "class_name": "io.netty.handler.codec.http2.Http2ConnectionHandler",
                "method_name": "close",
                "parameters": "(ChannelHandlerContext, ChannelPromise)",
                "footprint": "io.netty.handler.codec.http2.Http2ConnectionHandler.close(ChannelHandlerContext, ChannelPromise)"
            },
            {
                "class_name": "io.netty.handler.codec.http2.FrameReadListener",
                "method_name": "onDataRead",
                "parameters": "(ChannelHandlerContext, int, ByteBuf, int, boolean)",
                "footprint": "io.netty.handler.codec.http2.FrameReadListener.onDataRead(ChannelHandlerContext, int, ByteBuf, int, boolean)"
            },
            {
                "class_name": "io.netty.handler.codec.http2.FrameReadListener",
                "method_name": "onHeadersRead",
                "parameters": "(ChannelHandlerContext, int, Http2Headers, int, short, boolean, int, boolean)",
                "footprint": "io.netty.handler.codec.http2.FrameReadListener.onHeadersRead(ChannelHandlerContext, int, Http2Headers, int, short, boolean, int, boolean)"
            },
            {
                "class_name": "io.netty.handler.codec.http.HttpContentEncoder",
                "method_name": "encode",
                "parameters": "(ChannelHandlerContext, HttpObject, List)",
                "footprint": "io.netty.handler.codec.http.HttpContentEncoder.encode(ChannelHandlerContext, HttpObject, List)"
            },
            {
                "class_name": "io.netty.handler.codec.http.HttpObjectDecoder",
                "method_name": "readHeaders",
                "parameters": "(ByteBuf)",
                "footprint": "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf)"
            },
            {
                "class_name": "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder",
                "method_name": "decode",
                "parameters": "(ChannelHandlerContext, ByteBuf, List)",
                "footprint": "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder.decode(ChannelHandlerContext, ByteBuf, List)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslHandler",
                "method_name": "wrapNonAppData",
                "parameters": "(ChannelHandlerContext, boolean)",
                "footprint": "io.netty.handler.ssl.SslHandler.wrapNonAppData(ChannelHandlerContext, boolean)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslHandler",
                "method_name": "setHandshakeSuccessIfStillHandshaking",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.SslHandler.setHandshakeSuccessIfStillHandshaking()"
            },
            {
                "class_name": "io.netty.handler.ssl.SslHandler",
                "method_name": "setHandshakeSuccess",
                "parameters": "()",
                "footprint": "io.netty.handler.ssl.SslHandler.setHandshakeSuccess()"
            },
            {
                "class_name": "io.netty.handler.ssl.SslHandler",
                "method_name": "handlerAdded",
                "parameters": "(ChannelHandlerContext)",
                "footprint": "io.netty.handler.ssl.SslHandler.handlerAdded(ChannelHandlerContext)"
            },
            {
                "class_name": "io.netty.handler.ssl.SslHandler",
                "method_name": "startHandshakeProcessing",
                "parameters": "(boolean)",
                "footprint": "io.netty.handler.ssl.SslHandler.startHandshakeProcessing(boolean)"
            },
            {
                "class_name": "io.netty.channel.kqueue.KQueueDatagramChannelConfig",
                "method_name": "setNetworkInterface",
                "parameters": "(NetworkInterface)",
                "footprint": "io.netty.channel.kqueue.KQueueDatagramChannelConfig.setNetworkInterface(NetworkInterface)"
            },
            {
                "class_name": "io.netty.channel.kqueue.KQueueDatagramChannel",
                "method_name": "doWrite",
                "parameters": "(ChannelOutboundBuffer)",
                "footprint": "io.netty.channel.kqueue.KQueueDatagramChannel.doWrite(ChannelOutboundBuffer)"
            },
            {
                "class_name": "io.netty.channel.kqueue.KQueueDatagramChannelUnsafe",
                "method_name": "readReady",
                "parameters": "(KQueueRecvByteAllocatorHandle)",
                "footprint": "io.netty.channel.kqueue.KQueueDatagramChannelUnsafe.readReady(KQueueRecvByteAllocatorHandle)"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 1,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.685920"
    },
    {
        "vulnerability": "CVE-2019-14540",
        "repository": "FasterXML/jackson-databind",
        "symbols": [
            {
                "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
                "method_name": "<clinit>",
                "parameters": "()",
                "footprint": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<clinit>()"
            }
        ],
        "language": "java",
        "model_version": "v0.1.0",
        "confidence": 100,
        "spread": -1,
        "updated_at": "2021-12-21 13:36:34.686583"
    }
]